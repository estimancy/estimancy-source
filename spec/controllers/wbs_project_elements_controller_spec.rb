require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe WbsProjectElementsController do

  before do
    sign_in
    @connected_user = controller.current_user
  end

  before :each do
    @project = FactoryGirl.create(:project)
    @pe_wbs_project = FactoryGirl.create(:pe_wbs_project, :wbs_type => 'Activity', :project => @project)
    @wbs_project_element = FactoryGirl.create(:wbs_project_element, :is_root => true, :pe_wbs_project => @pe_wbs_project, author: @user)
  end

  # This should return the minimal set of attributes required to create a valid
  # WbsProjectElement. As you add validations to WbsProjectElement, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { 'wbs_activity_element_id' => '1'}
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # WbsProjectElementsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe 'GET new' do
    it 'assigns a new wbs_project_element as @wbs_project_element' do
      get :new, {:project_id => @project.id}
      assigns(:wbs_project_element).should be_a_new(WbsProjectElement)
    end
  end

  describe 'GET edit' do
    it 'assigns the requested wbs_project_element as @wbs_project_element' do
      get :edit, {:id => @wbs_project_element.to_param, :project_id => @project.id}
      assigns(:wbs_project_element).should eq(@wbs_project_element)
    end
  end

  describe 'POST create' do

    describe 'with valid params' do
      #it "creates a new WbsProjectElement" do
      #  current_user = @user
      #  expect {
      #    post :create, {:id => @wbs_project_element, :project_id => @project.id, :wbs_project_element => FactoryGirl.attributes_for(:wbs_project_element, :is_root => true)}
      #  }.to change(WbsProjectElement, :count).by(1)
      #end

  #    it "assigns a newly created wbs_project_element as @wbs_project_element" do
  #      post :create, {:id => @wbs_project_element, :project_id => @project.id, :wbs_project_element => FactoryGirl.attributes_for(:wbs_project_element, :is_root => true)}
  #      assigns(:wbs_project_element).should be_a(WbsProjectElement)
  #      assigns(:wbs_project_element).should be_persisted
  #    end
  #
  #    it "redirects to the created wbs_project_element Project view" do
  #      post :create, {:id => @wbs_project_element, :project_id => @project.id, :wbs_project_element => FactoryGirl.attributes_for(:wbs_project_element, :is_root => true)}
  #      response.should redirect_to(edit_project_path(@project, :anchor => "tabs-3"))
  #    end
    end
  end


  #==============================================================================================================================================

  #  describe "with invalid params" do
  #    it "assigns a newly created but unsaved wbs_project_element as @wbs_project_element" do
  #      # Trigger the behavior that occurs when invalid params are submitted
  #      WbsProjectElement.any_instance.stub(:save).and_return(false)
  #      post :create, {:wbs_project_element => { "wbs_activity_element_id" => "invalid value" }}, valid_session
  #      assigns(:wbs_project_element).should be_a_new(WbsProjectElement)
  #    end
  #
  #    it "re-renders the 'new' template" do
  #      # Trigger the behavior that occurs when invalid params are submitted
  #      WbsProjectElement.any_instance.stub(:save).and_return(false)
  #      post :create, {:wbs_project_element => { "wbs_activity_element_id" => "invalid value" }}, valid_session
  #      response.should render_template("new")
  #    end
  #  end
  #end


  #describe "PUT update" do
  #  describe "with valid params" do
  #    it "updates the requested wbs_project_element" do
  #      wbs_project_element = WbsProjectElement.create! valid_attributes
  #      # Assuming there are no other wbs_project_elements in the database, this
  #      # specifies that the WbsProjectElement created on the previous line
  #      # receives the :update_attributes message with whatever params are
  #      # submitted in the request.
  #      WbsProjectElement.any_instance.should_receive(:update_attributes).with({ "wbs_activity_element_id" => "1" })
  #      put :update, {:id => wbs_project_element.to_param, :wbs_project_element => { "wbs_activity_element_id" => "1" }}, valid_session
  #    end
  #
  #    it "assigns the requested wbs_project_element as @wbs_project_element" do
  #      wbs_project_element = WbsProjectElement.create! valid_attributes
  #      put :update, {:id => wbs_project_element.to_param, :wbs_project_element => valid_attributes}, valid_session
  #      assigns(:wbs_project_element).should eq(wbs_project_element)
  #    end
  #
  #    it "redirects to the wbs_project_element" do
  #      wbs_project_element = WbsProjectElement.create! valid_attributes
  #      put :update, {:id => wbs_project_element.to_param, :wbs_project_element => valid_attributes}, valid_session
  #      response.should redirect_to(wbs_project_element)
  #    end
  #  end
  #
  #  describe "with invalid params" do
  #    it "assigns the wbs_project_element as @wbs_project_element" do
  #      wbs_project_element = WbsProjectElement.create! valid_attributes
  #      # Trigger the behavior that occurs when invalid params are submitted
  #      WbsProjectElement.any_instance.stub(:save).and_return(false)
  #      put :update, {:id => wbs_project_element.to_param, :wbs_project_element => { "wbs_activity_element_id" => "invalid value" }}, valid_session
  #      assigns(:wbs_project_element).should eq(wbs_project_element)
  #    end
  #
  #    it "re-renders the 'edit' template" do
  #      wbs_project_element = WbsProjectElement.create! valid_attributes
  #      # Trigger the behavior that occurs when invalid params are submitted
  #      WbsProjectElement.any_instance.stub(:save).and_return(false)
  #      put :update, {:id => wbs_project_element.to_param, :wbs_project_element => { "wbs_activity_element_id" => "invalid value" }}, valid_session
  #      response.should render_template("edit")
  #    end
  #  end
  #end
  #
  #describe "DELETE destroy" do
  #  it "destroys the requested wbs_project_element" do
  #    wbs_project_element = WbsProjectElement.create! valid_attributes
  #    expect {
  #      delete :destroy, {:id => wbs_project_element.to_param}, valid_session
  #    }.to change(WbsProjectElement, :count).by(-1)
  #  end
  #
  #  it "redirects to the wbs_project_elements list" do
  #    wbs_project_element = WbsProjectElement.create! valid_attributes
  #    delete :destroy, {:id => wbs_project_element.to_param}, valid_session
  #    response.should redirect_to(wbs_project_elements_url)
  #  end
  #end

end
