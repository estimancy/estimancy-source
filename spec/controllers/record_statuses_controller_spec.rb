require 'spec_helper'
#
## This spec was generated by rspec-rails when you ran the scaffold generator.
## It demonstrates how one might use RSpec to specify the controller code that
## was generated by Rails when you ran the scaffold generator.
##
## It assumes that the implementation code is generated by the rails scaffold
## generator.  If you are using any extension libraries to generate different
## controller code, this generated spec may or may not pass.
##
## It only uses APIs available in rails and/or rspec-rails.  There are a number
## of tools you can use to make these specs even more expressive, but we're
## sticking to rails and rspec-rails APIs to keep things simple and stable.
##
## Compared to earlier versions of this generator, there is very limited use of
## stubs and message expectations in this spec.  Stubs are only used when there
## is no simpler way to get a handle on the object needed for the example.
## Message expectations are only used when there is no simpler way to specify
## that an instance is receiving a specific message.
#
describe RecordStatusesController do
  before :each do
    sign_in
    @connected_user = controller.current_user
  end
  # This should return the minimal set of attributes required to create a valid
  # RecordStatus. As you add validations to RecordStatus, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {
        'name' => 'Proposed',
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # RecordStatusesController. Be sure to keep this updated too.
  def valid_session
    {

    }
  end
  before :each do
    @record_status = FactoryGirl.create(:proposed_status)
  end
  #
  #describe "GET index" do
  #  it "assigns all record_statuses as @record_statuses" do
  #    record_status = RecordStatus.create! valid_attributes
  #    get :index, {}, valid_session
  #    get :index
  #    assigns(:proposed_status).should eq(@record_status)
  #  end
  #end

  #describe "GET show" do
  #  it "assigns the requested record_status as @record_status" do
  #    #record_status = RecordStatus.create! valid_attributes
  #    get :show, {:id => record_status.to_param}, valid_session
  #    assigns(:record_status).should eq(record_status)
  #  end
  #end
  #
  #describe "GET new" do
  #  it "assigns a new record_status as @record_status" do
  #    get :new, {}, valid_session
  #    assigns(:record_status).should be_a_new(RecordStatus)
  #  end
  #end
  #
  #describe "GET edit" do
  #  it "assigns the requested record_status as @record_status" do
  #    #record_status = RecordStatus.create! valid_attributes
  #    get :edit, {:id => record_status.to_param}, valid_session
  #    assigns(:record_status).should eq(record_status)
  #  end
  #end
  #
  #describe "POST create" do
  #  describe "with valid params" do
  #    it "creates a new RecordStatus" do
  #      expect {
  #        post :create, {:record_status => valid_attributes}, valid_session
  #      }.to change(RecordStatus, :count).by(1)
  #    end
  #
  #    it "assigns a newly created record_status as @record_status" do
  #      post :create, {:record_status => valid_attributes}, valid_session
  #      assigns(:record_status).should be_a(RecordStatus)
  #      assigns(:record_status).should be_persisted
  #    end
  #
  #    it "redirects to the created record_status" do
  #      post :create, {:record_status => valid_attributes}, valid_session
  #      response.should redirect_to(RecordStatus.last)
  #    end
  #  end
  #
  #  describe "with invalid params" do
  #    it "assigns a newly created but unsaved record_status as @record_status" do
  #      # Trigger the behavior that occurs when invalid params are submitted
  #      RecordStatus.any_instance.stub(:save).and_return(false)
  #      post :create, {:record_status => { "name" => "invalid value" }}, valid_session
  #      assigns(:record_status).should be_a_new(RecordStatus)
  #    end
  #
  #    it "re-renders the 'new' template" do
  #      # Trigger the behavior that occurs when invalid params are submitted
  #      RecordStatus.any_instance.stub(:save).and_return(false)
  #      post :create, {:record_status => { "name" => "invalid value" }}, valid_session
  #      response.should render_template("new")
  #    end
  #  end
  #end
  #
  #describe "PUT update" do
  #  describe "with valid params" do
  #    it "updates the requested record_status" do
  #      #record_status = RecordStatus.create! valid_attributes
  #      # Assuming there are no other record_statuses in the database, this
  #      # specifies that the RecordStatus created on the previous line
  #      # receives the :update_attributes message with whatever params are
  #      # submitted in the request.
  #      RecordStatus.any_instance.should_receive(:update_attributes).with({ "name" => "MyString" })
  #      put :update, {:id => record_status.to_param, :record_status => { "name" => "MyString" }}, valid_session
  #    end
  #
  #    it "assigns the requested record_status as @record_status" do
  #      record_status = RecordStatus.create! valid_attributes
  #      put :update, {:id => record_status.to_param, :record_status => valid_attributes}, valid_session
  #      assigns(:record_status).should eq(record_status)
  #    end
  #
  #    it "redirects to the record_status" do
  #      record_status = RecordStatus.create! valid_attributes
  #      put :update, {:id => record_status.to_param, :record_status => valid_attributes}, valid_session
  #      response.should redirect_to(record_status)
  #    end
  #  end
  #
  #  describe "with invalid params" do
  #    it "assigns the record_status as @record_status" do
  #      #record_status = RecordStatus.create! valid_attributes
  #      # Trigger the behavior that occurs when invalid params are submitted
  #      RecordStatus.any_instance.stub(:save).and_return(false)
  #      put :update, {:id => record_status.to_param, :record_status => { "name" => "invalid value" }}, valid_session
  #      assigns(:record_status).should eq(record_status)
  #    end
  #
  #    it "re-renders the 'edit' template" do
  #      #record_status = RecordStatus.create! valid_attributes
  #      # Trigger the behavior that occurs when invalid params are submitted
  #      RecordStatus.any_instance.stub(:save).and_return(false)
  #      put :update, {:id => record_status.to_param, :record_status => { "name" => "invalid value" }}, valid_session
  #      response.should render_template("edit")
  #    end
  #  end
  #end
  #
  #describe "DELETE destroy" do
  #  it "destroys the requested record_status" do
  #    #record_status = RecordStatus.create! valid_attributes
  #    expect {
  #      delete :destroy, {:id => record_status.to_param}, valid_session
  #    }.to change(RecordStatus, :count).by(-1)
  #  end
  #
  #  it "redirects to the record_statuses list" do
  #    #record_status = RecordStatus.create! valid_attributes
  #    delete :destroy, {:id => record_status.to_param}, valid_session
  #    response.should redirect_to(record_statuses_url)
  #  end
  #end

end
