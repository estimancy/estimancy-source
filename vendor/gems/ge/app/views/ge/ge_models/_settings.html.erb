<%= form_tag ge.ge_model_save_efforts_path(@ge_model), id: 'ge_form' do %>

  <% if @ge_model.ge_factors.size > 0 %>
      <h4><b> <%= I18n.t(:select_factor_value) %> </b></h4>

      <div class="row-fluid col-wrap">
        <div class="accordion" id="accordion_factor">

          <% @all_factors_values_hash.each do |scale_prod, factor_values_per_type| %>
            <% factor_values_per_type.each do |type, factor_values| %>

              <% if (factor_values.length == 1) && (factor_values.first.last.length == 1) %>
                <% factor_value = factor_values.first %>
                <% value = factor_value.last[0] %>
                <%= hidden_field_tag("#{scale_prod}_factor[#{value.factor_alias}]", value.id) %>

              <% else %>

                <% type_max_length = factor_values.max_by{ |k,v| v.length }.last.length %>
                <% if type_max_length <= 1 %>
                  <% factor_values.each do |key, values| %>
                    <% unless values.empty? %>
                      <%= hidden_field_tag("#{scale_prod}_factor[#{key}]", values.first.id) %>
                    <% end %>
                  <% end %>

                <% else %>
                  <% factor_type = type.gsub(/( )/, '_').downcase %>
                  <div class="span4 factor_group">
                    <div class="accordion-group">
                      <div class="accordion-heading">
                        <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion_factor" href="#<%= factor_type %>">
                          <b><%= type %></b>
                        </a>
                      </div>
                      <div id="<%= factor_type %>" class="accordion-body collapse in">
                        <div class="accordion-inner">

                          <% factor_values.each do |key, values| %>

                            <% if values.length == 1 %>
                              <%= hidden_field_tag("#{scale_prod}_factor[#{key}]", values.first.id) %>

                            <% elsif values.length > 1 %>
                              <% ge_factor = values[0].ge_factor %>
                              <div class="span12">
                                <span class="attribute_tooltip" title="<b><%= ge_factor.long_name %> : </b><br/> <%= ge_factor.description %>">
                                  <%= key.humanize.upcase %>
                                </span>
                                <%#= select_tag("#{scale_prod}_factor[#{key}]", options_for_select(values.map{ |f| [f.value_text, f.id]}, :selected => (@ge_input_values["#{key}"][:ge_factor_value_id] unless @ge_input_values["#{key}"].nil?)), { class: "slide input-xlarge" }) %>
                                <% ids_list = values.map{ |f| f.id } %>
                                <% js_factor_data = Hash.new %>
                                <% values.map{ |f| js_factor_data["#{f.id}"] = f.value_text }  %>
                                <% @ge_input_values["#{key}"].nil? ? (selected_value = 0) : (selected_value = @ge_input_values["#{key}"][:ge_factor_value_id]) %>

                                <!-- Get the default value -->
                                <% default_value = 0 %>
                                <% default_array = values.select{ |v| v.default? } %>
                                <% unless default_array.empty? %>
                                  <% default_value = default_array.first.id %>
                                <% end %>

                                <input type="text" name='<%= "#{scale_prod}_factor[#{key}]" %>' id='<%= "factor_#{key}" %>' class="factor-slider" value="" />
                                <hr>

                              </div>

                              <script type="text/javascript">

                                var data_ids = <%= raw ids_list.to_json.html_safe %> ;
                                var data_text_hash = <%= raw js_factor_data.to_json.html_safe %>;
                                var value_from = parseInt(<%= ids_list.index(selected_value) %>);
                                var default_value = parseInt(<%= ids_list.index(default_value) %>);

                                <!-- Get the default value if value_from is NaN -->
                                if(isNaN(value_from)){
                                  value_from = default_value;
                                }

                                $('#<%= "factor_#{key}" %>').ionRangeSlider({
                                  values: data_ids, //Array of factor_values ids
                                  from: value_from,
                                  grid: true,
                                  hide_min_max: true,
                                  prettify: function (num) {
                                    return data_text_hash[num];
                                  },

                                  //When value change, need to calculate again the Person Month effort value
                                  onFinish: function (data) {
                                    //console.log("Action: " + $('form#ge_form').attr('action'));
                                    //console.log("Params: " + $('form#ge_form').serialize());

                                    var valuesToSubmit = $('form#ge_form').serialize();
                                    $.ajax({
                                      type: "POST",
                                      //url: $('form#ge_form').attr('action'), //given url of the form
                                      url: '<%= "/ge/ge_models/#{@ge_model.id}/update_calculated_effort" %>',
                                      data: valuesToSubmit,
                                      dataType: "script",
                                      format: "js",
                                      cache: true
                                    });
                                    return false;
                                  }
                                });

                              </script>
                            <% end %>
                          <% end %>
                        </div>
                      </div>
                    </div>
                  </div>
                <% end %>
              <% end %>
            <% end %>
          <% end %>
        </div>
      </div>
  <% end %>

  <br>
  <div class="row-fluid">
    <div class="span6">

      <% attr = PeAttribute.find_by_alias("retained_size") %>
      <% unless @ge_model.input_pe_attribute.nil? %>
          <% attr = @ge_model.input_pe_attribute %>
      <% end %>

      <h4>
        <b>
          <% case attr.alias %>
            <% when "retained_size" %>
              <%= I18n.t :enter_size_in, parameter: @ge_model.input_size_unit %>
            <% when "effort" %>
              <%= I18n.t :enter_effort_in, parameter: @ge_model.input_effort_unit %>
            <% else %>
              <%= I18n.t :enter_size_in, parameter: @ge_model.input_size_unit %>
          <% end %>
        </b>
      </h4>

      <!-- Find all previous MP that has the attribute for output -->
      <%# possible_module_projects = [] %>
      <%# current_module_project.previous.each do |previous_mp| %>
        <%# if previous_mp.pemodule.attribute_modules.where(:pe_attribute_id => attr.id, in_out: ["output", "both"]).length >= 1 %>
            <%# possible_module_projects << previous_mp %>
        <%# end %>
      <%# end %>
      <% possible_module_projects = current_module_project.possible_previous_mp_for_attribute(attr) %>
      <% previous_ev = EstimationValue.where(:pe_attribute_id => attr.id,
                                             :module_project_id => possible_module_projects.last,
                                             :in_out => "output").first %>

      <%# previous_ev = EstimationValue.where(:pe_attribute_id => attr.id,
                                             :module_project_id => current_module_project.previous.first,
                                             :in_out => "output").first %>

      <% current_ev = EstimationValue.where(:pe_attribute_id => attr.id,
                                             :module_project_id => current_module_project.id,
                                             :in_out => "input").first %>

      <% component_id = current_component.id %>
      <% precision = attr.precision.nil? ? user_number_precision : attr.precision %>

      <table class="table table-condensed table-striped">
        <tr>
          <% if @ge_model.three_points_estimation == true %>
            <th><%= I18n.t(:bottom)%></th>
          <% end %>
          <th><%= I18n.t(:probable)%></th>
          <% if @ge_model.three_points_estimation == true %>
            <th><%= I18n.t(:top)%></th>
          <% end %>
        </tr>
        <tr>
          <% if @ge_model.three_points_estimation == true %>
            <td>
              <% if (!@ge_model.enabled_input || cannot?(:alter_estimation_plan, @project)) %>
                <%= hidden_field_tag "retained_size_low", Ge::GeModel::display_size(previous_ev, current_ev, "low", component_id, @ge_model), step: "any", class: "input-medium" %>
                <%= number_field_tag "", Ge::GeModel::display_size(previous_ev, current_ev, "low", component_id, @ge_model).to_f.round(user_number_precision), step: "any", class: "input-medium", disabled: true %>
              <% else %>
                <%= number_field_tag "retained_size_low", Ge::GeModel::display_size(previous_ev, current_ev, "low", component_id, @ge_model).to_f.round(user_number_precision), step: "any", class: "input-medium" %>
              <% end %>
            </td>
          <% end %>
          <td>
            <% if (!@ge_model.enabled_input || cannot?(:alter_estimation_plan, @project)) %>
              <%= hidden_field_tag "retained_size_most_likely", Ge::GeModel::display_size(previous_ev, current_ev, "most_likely", component_id, @ge_model), step: "any", class: "input-medium" %>
              <%= number_field_tag "", Ge::GeModel::display_size(previous_ev, current_ev, "most_likely", component_id, @ge_model).to_f.round(user_number_precision), step: "any", class: "input-medium", disabled: true %>
            <% else %>
              <%= number_field_tag "retained_size_most_likely", Ge::GeModel::display_size(previous_ev, current_ev, "most_likely", component_id, @ge_model).to_f.round(user_number_precision), step: "any", class: "input-medium" %>
            <% end %>
          </td>
          <% if @ge_model.three_points_estimation == true %>
            <td>
              <% if (!@ge_model.enabled_input || cannot?(:alter_estimation_plan, @project)) %>
                <%= hidden_field_tag "retained_size_high", Ge::GeModel::display_size(previous_ev, current_ev, "high", component_id, @ge_model), step: "any", class: "input-medium" %>
                <%= number_field_tag "", Ge::GeModel::display_size(previous_ev, current_ev, "high", component_id, @ge_model).to_f.round(user_number_precision), step: "any", class: "input-medium", disabled: true %>
              <% else %>
                <%= number_field_tag "retained_size_high", Ge::GeModel::display_size(previous_ev, current_ev, "high", component_id, @ge_model).to_f.round(user_number_precision), step: "any", class: "input-medium" %>
              <% end %>
            </td>
          <% end %>
        </tr>
      </table>
    </div>

    <div class="span6">
      <% attr = PeAttribute.find_by_alias("effort") %>
      <% unless @ge_model.output_pe_attribute.nil? %>
          <% attr = @ge_model.output_pe_attribute %>
      <% end %>

      <% ev = EstimationValue.where(:pe_attribute_id => attr.id, :module_project_id => current_module_project.id, in_out: "output").first %>

      <% theorical_effort_attr = PeAttribute.find_by_alias("theoretical_effort") %>
      <% theorical_ev = EstimationValue.where(pe_attribute_id: theorical_effort_attr.id, module_project_id: current_module_project.id, in_out: "output").last %>
      <% component_id = current_component.id %>

      <h4>
        <b>
          <%#= I18n.t(:cal_effort_for, parameter: convert_label(ev.nil? ? '': ev.send("string_data_probable")[component_id], @project.organization))%>
          <% case attr.alias %>
          <% when "retained_size" %>
              <%= I18n.t(:cal_size_for, parameter: @ge_model.output_size_unit)%>
          <% when "effort" %>
              <%= I18n.t(:cal_effort_for, parameter: @ge_model.output_effort_unit)%>
          <% when "introduced_defects" %>
            <%= I18n.t :cal_defect_for %>
          <% else %>
            <%= I18n.t(:cal_effort_for, parameter: @ge_model.output_effort_unit)%>
          <% end %>
        </b>
      </h4>
      <table class="table table-condensed table-striped">
        <tr>
          <% if @ge_model.three_points_estimation == true %>
            <th><%= I18n.t(:bottom)%></th>
          <% end %>
          <th><%= I18n.t(:probable)%></th>
          <% if @ge_model.three_points_estimation == true %>
            <th><%= I18n.t(:top)%></th>
          <% end %>
        </tr>
        <tr>
          <% if @ge_model.three_points_estimation == true %>
            <td>
              <% if (@ge_model.modify_theorical_effort && can?(:alter_estimation_plan, @project)) %>
                <%###= number_field_tag "effort_low", convert_with_specific_precision(ev.nil? ? '': ev.send("string_data_low")[component_id], @project.organization, user_number_precision), step: "any", id: "number_effort_low", class: "input-medium" %>
                <%= number_field_tag "effort_low", ev.nil? ? '' : convert_with_standard_unit_coefficient(ev, ev.send("string_data_low")[component_id], @ge_model.output_effort_standard_unit_coefficient, user_number_precision), step: "any", id: "number_effort_low", class: "input-medium" %>
              <% else %>
                <%= hidden_field_tag "effort_low", (ev.nil? ? '' : ev.send("string_data_low")[component_id]) %>
                <%###= number_field_tag "", convert_with_specific_precision(ev.nil? ? '' : ev.send("string_data_low")[component_id], @project.organization, user_number_precision), step: "any", id: "number_effort_most_low",  class: "input-medium", disabled: true %>
                <%= number_field_tag "", ev.nil? ? '' : convert_with_standard_unit_coefficient(ev, ev.send("string_data_low")[component_id], @ge_model.output_effort_standard_unit_coefficient, user_number_precision), step: "any", id: "number_effort_most_low",  class: "input-medium", disabled: true %>
              <% end %>
            </td>
          <% end %>

          <td>
            <% if (@ge_model.modify_theorical_effort && can?(:alter_estimation_plan, @project)) %>
                <!-- show the Theorical effort -->
                <%#= label_tag "Théorique" %>
                <%#= number_field_tag "theorical_effort_most_likely", convert_with_specific_precision(theorical_ev.nil? ? '': theorical_ev.send("string_data_most_likely")[component_id], @project.organization, user_number_precision), step: "any", id: "number_theorical_effort_most_likely", class: "input-medium" %>
                <%#= label_tag "retenu" %>
                <%####= number_field_tag "effort_most_likely", convert_with_specific_precision(ev.nil? ? '': ev.send("string_data_most_likely")[component_id], @project.organization, user_number_precision), step: "any", id: "number_effort_most_likely", class: "input-medium" %>
                <%= number_field_tag "effort_most_likely", ev.nil? ? '': convert_with_standard_unit_coefficient(ev, ev.send("string_data_most_likely")[component_id], @ge_model.output_effort_standard_unit_coefficient, user_number_precision), step: "any", id: "number_effort_most_likely", class: "input-medium" %>
            <% else %>
              <%= hidden_field_tag "effort_most_likely", (ev.nil? ? '' : ev.send("string_data_most_likely")[component_id]) %>
              <%###= number_field_tag "", convert_with_specific_precision(ev.nil? ? '' : ev.send("string_data_most_likely")[component_id], @project.organization, user_number_precision), step: "any", id: "number_effort_most_likely",  class: "input-medium", disabled: true %>
              <%= number_field_tag "", ev.nil? ? '' : convert_with_standard_unit_coefficient(ev, ev.send("string_data_most_likely")[component_id], @ge_model.output_effort_standard_unit_coefficient, user_number_precision), step: "any", id: "number_effort_most_likely",  class: "input-medium", disabled: true %>
            <% end %>
          </td>

          <% if @ge_model.three_points_estimation == true %>
            <td>
              <% if (@ge_model.modify_theorical_effort && can?(:alter_estimation_plan, @project)) %>
                <%#= number_field_tag "effort_high", convert_with_specific_precision(ev.nil? ? '': ev.send("string_data_high")[component_id], @project.organization, user_number_precision), step: "any", id: "number_effort_most_high",  class: "input-medium" %>
                <%= number_field_tag "effort_high", ev.nil? ? '': convert_with_standard_unit_coefficient(ev, ev.send("string_data_high")[component_id], @ge_model.output_effort_standard_unit_coefficient, user_number_precision), step: "any", id: "number_effort_most_high",  class: "input-medium" %>
              <% else %>
                <%= hidden_field_tag "effort_high", (ev.nil? ? '' : ev.send("string_data_high")[component_id]) %>
                <%###= number_field_tag "", convert_with_specific_precision(ev.nil? ? '' : ev.send("string_data_high")[component_id], @project.organization, user_number_precision), step: "any", id: "number_effort_most_high",  class: "input-medium", disabled: true %>
                <%= number_field_tag "", ev.nil? ? '' : convert_with_standard_unit_coefficient(ev, ev.send("string_data_high")[component_id], @ge_model.output_effort_standard_unit_coefficient, user_number_precision), step: "any", id: "number_effort_most_high",  class: "input-medium", disabled: true %>
              <% end %>
            </td>
          <% end %>
        </tr>
      </table>
    </div>

    <% if can? :execute_estimation_plan, @project %>
        <button type="submit" class="btn btn-default btn-mini pull-right"><%= I18n.t(:save) %></button>
    <% end %>

    <br>
    <hr>
  </div>
<% end %>
