<%= form_tag kb.kb_model_save_efforts_path(@kb_model), method: "post" do %>

    <div class="edition-page-module pt-3 pl-3 d-flex justify-content-between">

<!--      <span class="no_uppercase"><%#= @kb_model %></span>-->
      <div class="row page_module_title">
        <div class="col page_module_type">
          <%= I18n.t(:kb_calculation) %> :
        </div>
        <div class="col no_uppercase"><%= @kb_model %></div>
      </div>

      <div class="row float-right">
        <div class="col-12">
          <% if can? :execute_estimation_plan, @project %>
            <button type="submit" class="btn btn-primary button_margin_right">
              <%= I18n.t(:calculate_button) %>
            </button>
          <% end %>
          <%= link_to I18n.t(:export), kb.kb_model_dot_export_path(@kb_model), :class => "btn btn-secondary button_margin_right pull-left", :method => "post" %>
        </div>
      </div>

    </div>

    <section class="estimation-modules-edition">
      <div class="card card-widget">
        <div class="card-body">
          <div class="edition-bloc-title">
            <%= I18n.t(:past_projects_effort) %>
          </div>
          <div class="edition-bloc-content pb-4">

            <% module_project = current_module_project %>
            <% organization_id = @current_organization.id %>

                <div class="row">
                  <div class="col">
                    <p>
                      <strong>
                        <%= I18n.t(:project_number) %>
                        <span class="project_numbers">
                          <%= @kb_input.values.size %>
                        </span>
                      </strong>
                    </p>
                  </div>
                </div>

                <% if @kb_model.date_min %>
                  <div class="row-fluid">
                    <div class="col-12">
                      <p>
                        <strong>
                          Date Min:
                          <span class="project_numbers">
                      <%= @kb_model.date_min.strftime("%d %b %Y") %>
                    </span>
                        </strong>
                      </p>
                    </div>
                  </div>
                <% end %>

                <% if @kb_model.date_max %>
                  <div class="row-fluid">
                    <div class="col-12">
                      <p>
                        <strong>
                          Date Max:
                          <span class="project_numbers">
                      <%= @kb_model.date_max.strftime("%d %b %Y") %>
                    </span>
                        </strong>
                      </p>
                    </div>
                  </div>
                <% end %>

                <div class="row-fluid">
                  <div class="col-12">
                    <% unless @kb_model.kb_datas.empty? %>
                      <p>
                        <% arr = ["a", "b", "c", "d"] %>
                        <% @kb_model.kb_datas.map(&:custom_attributes).first.keys.each_with_index do |key, i| %>

                          <% begin %>
                            <% filter = @kb_model.send("filter_#{arr[i]}") %>
                          <% rescue %>
                            <% filter = "-" %>
                          <% end %>

                        <div class="input string required project_title">
                          <label class="string required control-label">
                            <strong>
                              <%= filter %>
                            </strong>
                          </label>
                          <%= select_tag "filters[#{key}]",
                                         options_for_select(@kb_model.kb_datas.map(&:custom_attributes).map{|ca| ca[key] }.uniq,
                                                            selected: @filters.nil? ? convert_project_category(@project, filter) : @filters[key]),
                                         class: "string required form-control filters",
                                         prompt: I18n.t(:Indifferent),
                                         disabled: !@kb_model.enabled_input %>

                          <input type="hidden" name="filters[<%= key %>]" value="<%= @filters.nil? ? convert_project_category(@project, filter) : @filters[key] %>" />
                        </div>
                      <% end %>
                      </p>
                    <% end %>

                    <p>
                      <strong>
                        <%= I18n.t(:equation) %>
                      </strong>
                    </p>

                    <p>
                      <span id="formula">
                        <%= @kb_input.formula %>
                      </span>
                    </p>

                    <% if @kb_model.three_points_estimation %>
                      <% array = ["low", "most_likely", "high"] %>
                    <% else %>
                      <% array = ["most_likely"] %>
                    <% end %>


                    <% array.each do |level| %>

                      <p>
                        <strong>
                          <%= I18n.t(:size) %> (<%= level.humanize %>)
                        </strong>
                      </p>

                      <%
                        module_project =  current_module_project
                        size_attr = module_project.pemodule.pe_attributes.where(alias: "retained_size").first #PeAttribute.find_by_alias("retained_size")

                        begin
                          size_current_ev = EstimationValue.where(:organization_id => organization_id, :module_project_id => module_project.id, :pe_attribute_id => size_attr.id, :in_out => "input").first

                        rescue
                          size_current_ev = nil
                        end

                        unless size_current_ev.nil?
                          ev_size_value = size_current_ev.string_data_probable[current_component.id]

                          begin
                            if ev_size_value.blank? || !@kb_model.enabled_input

                              if !size_current_ev.estimation_value_id.nil?
                                size_previous_ev = EstimationValue.find(size_current_ev.estimation_value_id)
                              else
                                 size_possible_module_projects = module_project.possible_previous_mp_for_attribute(size_attr)

                                 mpsize = module_project.previous.select{|i| i.pemodule.alias == "guw"}.first
                                 begin
                                   size_previous_ev = EstimationValue.where(:pe_attribute_id => size_attr.id,
                                                                          :module_project_id => mpsize.id, :in_out => "output").first
                                 rescue
                                   begin
                                     mpsize = module_project.previous.select{|i| i.pemodule.alias == "ge"}.first
                                     size_previous_ev = EstimationValue.where(:organization_id => organization_id, :module_project_id => mpsize.id,
                                                                              :pe_attribute_id => size_attr.id, :in_out => "output").first

                                   rescue
                                     size_previous_ev = nil
                                   end
                                 end
                              end
                            end
                          end
                        end

                        @size = Kb::KbModel::display_size(size_previous_ev, size_current_ev, level, current_component.id, @kb_model)


                 effort_attr = module_project.pemodule.pe_attributes.where(alias: "effort").first

                 begin
                  effort_current_ev = EstimationValue.where(:organization_id => organization_id,
                                                            :module_project_id => module_project.id,
                                                            :pe_attribute_id => effort_attr.id,
                                                            :in_out => "input").first
                 rescue
                   effort_current_ev = nil
                 end

                        effort_possible_module_projects = module_project.possible_previous_mp_for_attribute(effort_attr)

                        if module_project.previous.size > 1

                   if effort_current_ev && !effort_current_ev.estimation_value_id.nil?
                     ev = EstimationValue.find(effort_current_ev.estimation_value_id)
                   else
                     begin
                        ev = EstimationValue.where(:organization_id => organization_id,
                                                   module_project_id: module_project.previous.last.id,
                                                   pe_attribute_id: effort_attr.id,
                                                   in_out: "output").first
                     rescue
                      ev = nil
                     end
                   end

                          if ev
                            begin
                              if ev.module_project.pemodule.alias == "effort_breakdown"
                                @previous_effort = ev.send("string_data_probable")[current_component.id][module_project.previous.last.wbs_activity.root_element.id][:value].to_f
                              else
                                @previous_effort = ev.send("string_data_probable")[current_component.id].to_f
                              end
                            rescue
                              @previous_effort = 0
                            end
                          end
                        end
                      %>

                      <% unless @kb_model.enabled_input %>
                        <%= hidden_field_tag "size", @size %>
                        <%= text_field_tag "", convert_with_precision(@size, user_number_precision, true),
                                           class: "string required form-control",
                                           disabled: true  %>
                      <% else %>
                        <%= number_field_tag "size", @size, class: "string required form-control", step: "any" %>
                      <% end %>

                      <p>
                        <strong>
                          Effort (<%= @kb_model.effort_unit.blank? ? 'h.h' : @kb_model.effort_unit %>)
                        </strong>
                      </p>
                      <% effort_attr = module_project.pemodule.pe_attributes.where(alias: "effort").first #PeAttribute.find_by_alias("effort") %>

                <% begin
                    output_effort_current_ev = EstimationValue.where(:organization_id => organization_id,
                                                                     :module_project_id => module_project.id,
                                                                     :pe_attribute_id => effort_attr.id,
                                                                     :in_out => "output").first
                   rescue
                     output_effort_current_ev = nil
                   end
                %>

                      <% if output_effort_current_ev.nil?
                           @effort = 0
                         else
                           @effort = output_effort_current_ev.send("string_data_#{level}")[current_component.id].to_f / (@kb_model.standard_unit_coefficient.nil? ? 1 : @kb_model.standard_unit_coefficient)
                         end
                      %>

                      <% unless @kb_model.enabled_input %>
                        <span id="effort_label">
                          <%= hidden_field_tag "effort", @effort %>
                          <%= text_field_tag "", convert_with_precision(@effort, user_number_precision, true),
                                             class: "string required form-control effort",
                                             disabled: true %>
                        </span>
                      <% else %>
                        <%= number_field_tag "effort",
                                             @effort.nil? ? '' : @effort,
                                             class: "string required form-control", step: "any" %>
                      <% end %>
                    <% end %>

                    <hr>

                    <% if module_project.previous.size > 1 %>
                      <p>
                        <strong>
                          Benchmark
                        </strong>
                      </p>

                      <% if @previous_effort %>
                        <p>
                          <strong>
                            Effort (<%= module_project.previous.last %>)
                          </strong>
                        </p>
                        <%= (@previous_effort.to_f / @kb_model.standard_unit_coefficient.to_f).round(2) %>  <%= @kb_model.effort_unit.blank? ? 'h.h' : @kb_model.effort_unit %>
                        <%= hidden_field_tag "previous_effort", @previous_effort %>

                        <p>
                          <strong>
                            Ecart
                          </strong>
                        </p>
                        <!-- # Affichage de l'écart en % -->
                        <%#= (@effort - (@previous_effort.to_f / @kb_model.standard_unit_coefficient.to_f).round(2)).round(2) %> <%#= @kb_model.effort_unit.blank? ? 'h.h' : @kb_model.effort_unit %>
                        <% ecart_pe_attribute = module_project.pemodule.pe_attributes.where(alias: "percent").first %>
                        <% begin
                             ecart_ev = EstimationValue.where(organization_id: organization_id, module_project_id: module_project.id, pe_attribute_id: ecart_pe_attribute.id, in_out: "output").first
                             ecart_percent = ecart_ev.send("string_data_probable")[current_component.id]
                            rescue
                              ecart_percent = nil
                           end
                        %>
                        <%= ecart_percent.to_f.round(2) %> <%= '%' %>
                      <% end %>
                    <% end %>
                  </div>
                </div>
              </div>
              <div class="col-9">
                <div id="scatter_chart" style="min-width: 310px; height: 400px; margin: 0 auto;"></div>
                <hr>
              </div>
            </div>

        <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js"></script>
        <script src="https://code.highcharts.com/highcharts.js"></script>
        <script src="https://code.highcharts.com/highcharts-more.js"></script>
        <script src="https://code.highcharts.com/modules/exporting.js"></script>
        <script src="https://code.highcharts.com/modules/export-data.js"></script>
        <script>
            chart = $('#scatter_chart').highcharts({
                chart: {
                    zoomType: 'xy'
                },
                title: {
                    text: "<%= @kb_model.name %>"
                },
                xAxis: {
                    title: {
                        enabled: true,
                        text: '<%= I18n.t(:size) %>',
                    },
                    min: 0
                },
                yAxis: {
                    title: {
                        //text: 'Effort (<%= @kb_model.effort_unit %>)'
                        text: 'Effort (<%= @kb_model.effort_unit.blank? ? 'h.h' : @kb_model.effort_unit %>)'
                    },
                    min: 0
                },
                series: [{
                    name: '<%= I18n.t("distribution_taille_effort") %>',
                    marker: {
                        radius: 3
                    },
                    type: 'scatter',
                    color: 'rgba(223, 83, 83, 1)',
                    tooltip: {
                        pointFormat: 'UF : {point.x} <br> Effort : {point.y} <%= @kb_model.effort_unit %>'
                    },
                    data: <%= @kb_input.values %>
                },{
                    name: '<%= I18n.t("regression_lineaire") %>',
                    marker: {
                        radius: 0
                    },
                    type: 'line',
                    color: 'rgba(200, 200, 200, 1)',
                    data: <%= @kb_input.regression.map{|i, j| [i.round(2), j.round(2)] }.sort %>

                },{
                    name: '<%= I18n.t("regression_lineaire_plus_80") %>',
                    marker: {
                        radius: 0
                    },
                    type: 'line',
                    color: 'rgba(83, 223, 83, 1)',
                    data: <%= @kb_input.regression.map{|i, j| [i.round(2), (j * 1.8).round(2)] }.sort %>
                },{
                    name: '<%= I18n.t("regression_lineaire_moins_80") %>',
                    marker: {
                        radius: 0
                    },
                    type: 'line',
                    color: 'rgba(83, 223, 255, 1)',
                    data: <%= @kb_input.regression.map{|i, j| [i.round(2), (j / 1.8).round(2)] }.sort %>
                },{
                    name: 'Effort précédent',
                    marker: {
                        radius: 5
                    },
                    type: 'scatter',
                    color: 'rgba(0, 0, 0, 1)',
                    data: <%= [
                [
                  @previous_effort.nil? ? 0 : @size,
                  @previous_effort.nil? ? 0 : (@previous_effort.to_f / @kb_model.standard_unit_coefficient.to_f).round(2)
                ]
              ] %>
                },{
                    name: '<%= I18n.t("effort_retained") %>',
                    marker: {
                        radius: 5
                    },
                    type: 'scatter',
                    color: 'rgba(0, 0, 0, 1)',
                    data: <%= [[@size, @effort.to_f.round(2)]] %>
                }]
            });

            //$(document).ready(function () {
            $(document).ready(function() {
                $(".date-picker").datepicker({
                    language: '<%= set_user_language_for_datepicker %>',
                    autoclose: true,
                    todayHighlight: true,
                    todayBtn: true
                });
            });

        </script>
      </div>
  </section>
<% end %>