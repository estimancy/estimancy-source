<h3 id="kb">
  <strong>
    <%= @kb_model %>
  </strong>
  <hr>
</h3>

<%= form_tag kb.kb_model_save_efforts_path(@kb_model), method: "post" do %>
  <div class="row-fluid">
    <div class="span3">

      <div class="row-fluid">
        <div class="span12">
          <h5>
            <strong>
               <%= I18n.t(:project_number) %>
              <span class="project_numbers">
                <%= @kb_input.values.size %>
              </span>
            </strong>
          </h5>
        </div>
      </div>

      <% if @kb_model.date_min %>
        <div class="row-fluid">
          <div class="span12">
            <h5>
              <strong>
                 Date Min:
                <span class="project_numbers">
                  <%= @kb_model.date_min %>
                </span>
              </strong>
            </h5>
          </div>
        </div>
      <% end %>

      <% if @kb_model.date_max %>
        <div class="row-fluid">
          <div class="span12">
            <h5>
              <strong>
                 Date Max:
                <span class="project_numbers">
                  <%= @kb_model.date_max %>
                </span>
              </strong>
            </h5>
          </div>
        </div>
      <% end %>

      <div class="row-fluid">
        <div class="span12">
          <% unless @kb_model.kb_datas.empty? %>
            <p>
              <% arr = ["a", "b", "c", "d"] %>
              <% @kb_model.kb_datas.map(&:custom_attributes).first.keys.each_with_index do |key, i| %>
                <div class="input string required project_title">
                  <label class="string required control-label">
                    <strong>
                      <%= @kb_model.send("filter_#{arr[i]}") %>
                    </strong>
                  </label>
                  <%= select_tag "filters[#{key}]",
                                 options_for_select(@kb_model.kb_datas.map(&:custom_attributes).map{|ca| ca[key] }.uniq,
                                                    selected: @filters.nil? ? convert_project_category(@project, @kb_model.send("filter_#{arr[i]}")) : @filters[key]),
                                 class: "string required input-xlarge filters",
                                 prompt: I18n.t(:Indifferent),
                                 disabled: !@kb_model.enabled_input %>

                  <input type="hidden" name="filters[<%= key %>]" value="<%= @filters.nil? ? (@kb_input.filters[key]) : @filters[key] %>" />
                </div>
              <% end %>
            </p>
          <% end %>

          <h5>
            <strong>
              <%= I18n.t(:equation) %>
            </strong>
          </h5>
          <p>
            <span id="formula">
              <%= @kb_input.formula %>
            </span>
          </p>

          <% if @kb_model.three_points_estimation %>
            <% array = ["low", "most_likely", "high"] %>
          <% else %>
            <% array = ["most_likely"] %>
          <% end %>

          <% array.each do |level| %>

            <h5>
              <strong>
                <%= I18n.t(:size) %> (<%= level.humanize %>)
              </strong>
            </h5>

            <%
             size_attr = PeAttribute.find_by_alias("retained_size")
             size_previous_ev = EstimationValue.where(:pe_attribute_id => size_attr.id,
                                                        :module_project_id => current_module_project.previous.first.id,
                                                        :in_out => "output").first

             size_current_ev = EstimationValue.where(:pe_attribute_id => size_attr.id,
                                                       :module_project_id => current_module_project.id,
                                                       :in_out => "input").first
             @size = Kb::KbModel::display_size(size_previous_ev, size_current_ev, level, current_component.id)


             effort_attr = PeAttribute.find_by_alias("effort")
             if current_module_project.previous.size > 1
               @previous_effort = EstimationValue.where(pe_attribute_id: effort_attr.id,
                                                        module_project_id: current_module_project.previous.last.id,
                                                        in_out: "output").first.send("string_data_probable")[current_component.id].to_f / (@kb_model.standard_unit_coefficient.nil? ? 1 : @kb_model.standard_unit_coefficient)
             end %>

            <% unless @kb_model.enabled_input %>
               <%= hidden_field_tag "size", @size %>
               <%= text_field_tag "", convert_with_precision(@size, user_number_precision, true),
                                 class: "string required input-xlarge",
                                 disabled: true  %>
            <% else %>
              <%= number_field_tag "size", @size, class: "string required input-xlarge", step: "any" %>
            <% end %>

            <h5>
              <strong>
                Effort (<%= @kb_model.effort_unit.blank? ? 'h.h' : @kb_model.effort_unit %>)
              </strong>
            </h5>
            <% effort_attr = PeAttribute.find_by_alias("effort") %>
            <% effort_current_ev = EstimationValue.where(:pe_attribute_id => effort_attr.id,
                                                         :module_project_id => current_module_project.id,
                                                         :in_out => "output").first %>
            <% @effort = effort_current_ev.send("string_data_#{level}")[current_component.id].to_f / (@kb_model.standard_unit_coefficient.nil? ? 1 : @kb_model.standard_unit_coefficient) %>

            <% unless @kb_model.enabled_input %>
              <span id="effort_label">
                <%= hidden_field_tag "effort", @effort %>
                <%= text_field_tag "", convert_with_precision(@effort, user_number_precision, true),
                                     class: "string required input-xlarge effort",
                                     disabled: true %>
              </span>
            <% else %>
              <%= number_field_tag "effort",
                                   @effort.nil? ? '' : @effort,
                                   class: "string required input-xlarge", step: "any" %>
            <% end %>
          <% end %>
          <hr>

          <% if current_module_project.previous.size > 1 %>
            <h5>
              <strong>
                Benchmark
              </strong>
            </h5>

            <h5>
              <strong>
                Effort (<%= current_module_project.previous.last %>)
              </strong>
            </h5>
            <%= @previous_effort.round(2) %> j.h.

            <h5>
              <strong>
                Ecart
              </strong>
            </h5>
            <%= @previous_effort - @effort %>
          <% end %>
        </div>
      </div>
    </div>
    <div class="span9">
      <div id="scatter_chart" style="min-width: 310px; height: 400px; margin: 0 auto"></div>
      <hr>
    </div>
  </div>
  <div class="row-fluid">
    <div class="span12">
      <% if can? :execute_estimation_plan, @project %>
        <button type="submit" class="btn btn-default btn-mini pull-right">
          <%= I18n.t(:update)%>
        </button>
      <% end %>
      <%= link_to I18n.t(:export), kb.kb_model_dot_export_path(@kb_model), :class => "btn btn-default btn-mini button_margin_right pull-right", :method => "post" %>
    </div>
  </div>
<% end %>

<script>
  $(document).ready(function(){
    $(function() {
      $('#scatter_chart').highcharts({
        chart: {
          zoomType: 'xy'
        },
        title: {
          text: "<%= @kb_model.name %>"
        },
        xAxis: {
          title: {
            enabled: true,
            text: '<%= I18n.t(:size) %>',
          },
          min: 0
        },
        yAxis: {
          title: {
            text: 'Effort (<%= @kb_model.effort_unit %>)'
          },
          min: 0
        },
        series: [{
          name: '<%= I18n.t("distribution_taille_effort") %>',
          marker: {
            radius: 3
          },
          type: 'scatter',
          color: 'rgba(223, 83, 83, 1)',
          tooltip: {
            pointFormat: 'UF : {point.x} <br> Effort : {point.y} <%= @kb_model.effort_unit %>'
          },
          data: <%= @kb_input.values %>
        },{
          name: '<%= I18n.t("regression_lineaire") %>',
          marker: {
            radius: 0
          },
          type: 'line',
          color: 'rgba(200, 200, 200, 1)',
          data: <%= @kb_input.regression.map{|i, j| [i.round(2), j.round(2)] }.sort %>

        },{
          name: '<%= I18n.t("regression_lineaire_plus_80") %>',
          marker: {
            radius: 0
          },
          type: 'line',
          color: 'rgba(83, 223, 83, 1)',
          data: <%= @kb_input.regression.map{|i, j| [i.round(2), (j * 1.8).round(2)] }.sort %>
        },{
          name: '<%= I18n.t("regression_lineaire_moins_80") %>',
          marker: {
            radius: 0
          },
          type: 'line',
          color: 'rgba(83, 223, 255, 1)',
          data: <%= @kb_input.regression.map{|i, j| [i.round(2), (j / 1.8).round(2)] }.sort %>
        },{
          name: '<%= I18n.t("effort_retained") %>',
          marker: {
            radius: 5
          },
          type: 'scatter',
          color: 'rgba(0, 0, 0, 1)',
          data: <%= [
                      [
                        @previous_effort.nil? ? 0 : @size,
                        @previous_effort.nil? ? 0 : @previous_effort.round(2)
                      ]
                    ] %>
        },{
          name: 'Effort précédent',
          marker: {
            radius: 5
          },
          type: 'scatter',
          color: 'rgba(0, 0, 0, 1)',
          data: <%= [[@size, @effort.round(2)]] %>
        }]
      });
    });


    /**
     * Sand-Signika theme for Highcharts JS
     * @author Torstein Honsi
     */

// Load the fonts
    Highcharts.createElement('link', {
      href: '//fonts.googleapis.com/css?family=Signika:400,700',
      rel: 'stylesheet',
      type: 'text/css'
    }, null, document.getElementsByTagName('head')[0]);

    // Add the background image to the container
    Highcharts.wrap(Highcharts.Chart.prototype, 'getContainer', function (proceed) {
      proceed.call(this);
      this.container.style.background = 'url(http://www.highcharts.com/samples/graphics/sand.png)';
    });

    Highcharts.theme = {
      colors: ["#f45b5b", "#8085e9", "#8d4654", "#7798BF", "#aaeeee", "#ff0066", "#eeaaee", "#55BF3B", "#DF5353", "#7798BF", "#aaeeee"],
      chart: {
        backgroundColor: null
      },
      title: {
        style: {
          color: 'black',
          fontSize: '13px',
          fontWeight: 'bold'
        }
      },
      subtitle: {
        style: {
          color: 'black'
        }
      },
      tooltip: {
        borderWidth: 0
      },
      legend: {
        itemStyle: {
          fontWeight: 'bold',
          fontSize: '13px'
        }
      },
      xAxis: {
        labels: {
          style: {
            color: '#6e6e70'
          }
        }
      },
      yAxis: {
        labels: {
          style: {
            color: '#6e6e70'
          }
        }
      },
      plotOptions: {
        series: {
          shadow: true
        },
        candlestick: {
          lineColor: '#404048'
        },
        map: {
          shadow: false
        }
      },

      // Highstock specific
      navigator: {
        xAxis: {
          gridLineColor: '#D0D0D8'
        }
      },
      rangeSelector: {
        buttonTheme: {
          fill: 'white',
          stroke: '#C0C0C8',
          'stroke-width': 1,
          states: {
            select: {
              fill: '#D0D0D8'
            }
          }
        }
      },
      scrollbar: {
        trackBorderColor: '#C0C0C8'
      },

      // General
      background2: '#E0E0E8'

    };

    // Apply the theme
    Highcharts.setOptions(Highcharts.theme);
  });

  $(document).ready(function () {
    $(".date-picker").datepicker({
      language: '<%= set_user_language %>',
      autoclose: true,
      todayHighlight: true,
      todayBtn: true
    });
  });


</script>
