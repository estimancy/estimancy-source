<h3>
  Calcul de la durée et de la taille des équipes
</h3>
<!--<div class="alert alert-dismissable">-->
  <!--<div class="row-fluid">-->
    <!--<div class="span6" style="border-right-style: solid; border-right: thick double">-->
      <!--Le module d'équipe permet de calculer la durée et la taille des équipes du projet. Nous proposons 2 méthodes: <br>-->
      <!--<b>-->
        <!--- Approche linéaire (trapèze) <br>-->
        <!--- Courbe de Rayleigh-->
      <!--</b>-->
    <!--</div>-->

    <!--<div class="span6">-->
      <!--Si nous ne disposons pas de la durée, nous proposons de la calculer à l'aide de la formule de <b>McDonnell</b>: <br>-->
      <!--Durée = <b>coef. * K^n</b>     ( K = <b>Effort</b> en hommes/semaines ou hommes/mois )<br>-->
      <!--On a : <b>coef</b> = <%# @staffing_model.mc_donell_coef %> et <b>n</b> = <%# @staffing_model.puissance_n %>; Par défaut coef=6 et n = 1/3-->
    <!--</div>-->
  <!--</div>-->
<!--</div>-->

<%
   previous_activity = current_module_project.previous.first.wbs_activity
   attribute = PeAttribute.find_by_alias("effort")
   unless previous_activity.nil?
     previous_activity_root = current_module_project.previous.first.wbs_activity.wbs_activity_elements.first.root
     effort = EstimationValue.where(:pe_attribute_id => attribute.id,
                                         :module_project_id => current_module_project.previous.first,
                                         :in_out => "output").first.string_data_probable[current_component.id][previous_activity_root.id][:value] / (@staffing_model.standard_unit_coefficient.nil? ? 1 : @staffing_model.standard_unit_coefficient.to_f)
   else
     effort = EstimationValue.where(:pe_attribute_id => attribute.id,
                                    :module_project_id => current_module_project.id,
                                    :in_out => "input").first.string_data_probable[current_component.id] / (@staffing_model.standard_unit_coefficient.nil? ? 1 : @staffing_model.standard_unit_coefficient.to_f)
   end
%>

<%= simple_form_for @staffing_custom_data, url: staffing.staffing_custom_datum_save_staffing_custom_data_path(@staffing_custom_data), method: :post do |f| %>
  <div class="row-fluid">

    <div class="row-fluid">
      <div class="span12">
        <h4>
          <b>Attributs d'entrées </b>
        </h4>
      </div>
    </div>

    <div class="row-fluid">
      <div class="span2">
        <%= f.input :global_effort_value, label: "Effort (#{@staffing_model.effort_unit})", :input_html => { :class => 'input-medium', value: effort.nil? ? '' : effort.round(1) } %>
      </div>
      <div class="span2">
        <% if @staffing_custom_data.duration.nil? %>
          <%= f.input :duration, label: "Durée (en semaine)", :input_html => { :class => 'input-medium', value: (@staffing_model.mc_donell_coef * effort.to_i ** @staffing_model.puissance_n).round(0) } %>
        <% else %>
          <%= f.input :duration, label: "Durée (en semaine)", :input_html => { :class => 'input-medium'} %>
        <% end %>
      </div>
    </div>
  </div>

    <!-- Si method Trapeze -->
    <div id="staffing_trapeze_parameters">
      <%= render :partial => 'staffing/staffing_custom_data/staffing_trapeze_method', object: @staffing_custom_data , :locals => { :f => f } %>
    </div>

    <hr>

    <% if can? :execute_estimation_plan, @project %>
      <button type="submit" class="btn btn-default btn-mini pull-right"><%= I18n.t(:update) %></button>
    <% end %>

<% end %>