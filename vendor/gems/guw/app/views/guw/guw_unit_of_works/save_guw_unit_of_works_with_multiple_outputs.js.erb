<% @unit_of_work_groups = Guw::GuwUnitOfWorkGroup.where(organization_id: @organization.id,
                                                        project_id: @project.id,
                                                        module_project_id: @module_project.id,
                                                        pbs_project_element_id: @component.id)

  @module_positions = ModuleProject.where(:project_id => @project.id).order(:position_y).all.map(&:position_y).uniq.max || 1
  @module_positions_x = @project.module_projects.order(:position_x).all.map(&:position_x).max
%>

<% if @reload_partial == true %>
  <% if @modified_guw_line_ids.size <= 30 %>
    <% @guw_types = @guw_model.guw_types %>

    <% @hash_guw_outputs = {} %>
    <% Guw::GuwOutput.where(guw_model_id: @guw_model.id,
                            name: @guw_model.orders.map(&:first)).each do |guw_output| %>
      <% @hash_guw_outputs[guw_output.name] = guw_output %>
    <% end %>

    <% @hash_guw_coefficients = {} %>
    <% Guw::GuwCoefficient.where(guw_model_id: @guw_model.id,
                                 name: @guw_model.orders.map(&:first)).each do |guw_coef| %>
      <% @hash_guw_coefficients[guw_coef.name] = guw_coef %>
    <% end %>

    <% @guow_guw_coefficient_element_unit_of_works = Hash.new {|h,k| h[k] = [] } %>
    <% Guw::GuwCoefficientElementUnitOfWork.where(module_project_id: current_module_project.id).each do |gceuw| %>
      <% @guow_guw_coefficient_element_unit_of_works[gceuw.guw_unit_of_work_id] << gceuw %>
    <% end %>

    <% @guw_unit_of_works.each do |guw_unit_of_work| %>
      <% @guw_type = guw_unit_of_work.guw_type %>
      $("tr#<%= guw_unit_of_work.id %>").html("<%= j(render(partial: "guw/guw_unit_of_works/guw_tr", locals: { "guow" => guw_unit_of_work, "uowg" => guw_unit_of_work.guw_unit_of_work_group})) %>");
    <% end %>

    $("#modified_guw_line_ids").val("");
  <% else %>
    $("#guw_block").html("<%= j(render(partial: "guw/guw_unit_of_works/settings_new")) %>");
  <% end %>
<% end %>

$("#output_data_view_widgets_results").html("<%= j(render(partial: "views_widgets/dashboard_views_widgets_results", object: [@module_positions, @module_positions_x, @wbs_activity_ratio])) %>");

//Mettre Ã  jour l'url sans recharger la page
if (history.pushState) {
  var newurl = window.location.protocol + "//" + window.location.host + window.location.pathname;
  window.history.pushState({path:newurl},'',newurl);
}

var my_array = [];
$(document).ready(function(){
  $("table#guw input").keyup(function(e) {
    var new_line = $(this).closest("tr").data("guw-id");
    my_array.push(new_line);
    $("#modified_guw_line_ids").val(my_array);
  });

  $("table#guw select").on("change", function(e) {
    var new_line = $(this).closest("tr").data("guw-id");
    my_array.push(new_line);
    $("#modified_guw_line_ids").val(my_array);
  });

  $('.selected').change(function(){
    $.ajax({
      url: "<%= guw.change_selected_state_path %>",
      data: "guw_unit_of_work_id=" + this.value + "&guw_unit_of_work_group_id=" + $("." + this.value + "_group").val()
    });
  });

  $('.guw_type').change(function(){
    reset($(this).attr("guw"));
    $.ajax({
      url: "<%= guw.change_cotation_path %>",
      data: "guw_type_id=" + this.value + "&guw_unit_of_work_id=" + $(this).attr("guw")
    });
  });
});

var gridster = [];
var iteration = -1;
$(function () { //DOM Ready

  $('[id^="view_widgets_container_"]').each(function () {
    var container_id = $(this).attr('id');
    var $widgets_container = $('#' + container_id);

    //$("#"+container_id+ " > ul").gridster({
    gridster[++iteration] = $("#" + container_id + " ul").gridster({
      namespace: '#' + container_id,
      widget_margins: [5, 5],
      widget_base_dimensions: [60, 60], //widget_base_dimensions: [60, 60],
      widget_selector: "li",
      extra_rows: 0,
      extra_cols: 0,
      shift_widgets_up: false,
      shift_larger_widgets_down: false,
      collision: {
        wait_for_mouseup: true
      },

      //autogenerate_stylesheet: true,
      min_cols: 1,
      max_cols: 100,

      serialize_params: function ($w, wgd) {
        return {
          /* add element (ID, view_widget_id and container_id) to data*/
          id: $w.attr('id'),
          view_widget_id: $w.data('view_widget_id'),
          container_id: $w.data('container_id'),
          /* defaults */
          col: wgd.col, row: wgd.row, size_x: wgd.size_x, size_y: wgd.size_y
        }
      },

      draggable: {
        // Update all widgets positions
        stop: function (event, ui) {
          //var gridster = $(".gridster ul").gridster().data('gridster');
          var gridster = $('#' + container_id + ".gridster ul").gridster().data('gridster');
          var gridster_elements = gridster.serialize();

          //alert(JSON.stringify(gridster_elements));
          //alert(gridster_elements);
          //alert(JSON.parse(gridster_elements);

          $.ajax({
            type: 'POST',
            url: "/update_view_widget_positions",
            data: {
              view_id: this.id,
              views_widgets: gridster_elements
            }
          });
        }
      },


      // Qui marchait avec l'ancienne version
      resize: {
        enabled: true,
        axes: ['both'],

        //handles: ['n', 'e', 's', 'w', 'ne', 'se', 'sw', 'nw'],
        //max_size: [20, 20],
        //min_size: [1, 1],

        stop: function (event, ui, $widget) {

          // Get final width and height of widget
          var newHeight = this.resize_coords.data.height;
          var newWidth = this.resize_coords.data.width;
          var text_size = ((newHeight + newWidth) / 2) * 0.015;

          //Update the font-size according to the widget sizes
          var widget_id = $widget.data('id');
          $('li#' + widget_id + '.widget_text').css("fontSize", text_size + "em");

          // Update font-size : $('.changeMe').css("font-size", $(this).val() + "px");
          $('#widget_text_' + widget_id + '.widget_text.without_min_max').fitText(0.6);
          $('#widget_text_' + widget_id + '.widget_text.with_min_max').fitText(0.7);
          $("li.no_estimation_value").fitText(2);
          $('#widget_name_' + widget_id + '.widget_name').fitText(0.8);
          $('span#min_max_' + widget_id + '.min_max').fitText(1);

          //Update the widget size (width, height) in database
          var newDimensions = this.serialize($widget)[0]; //get final sizex and sizey
          $.ajax({
            method: 'GET',
            url: "/update_view_widget_sizes",
            data: {
              view_widget_id: $widget.data('view_widget_id'),
              sizex: newDimensions.size_x,
              sizey: newDimensions.size_y
            }
          });
        }
      }

    }).data('gridster');
  })
});

