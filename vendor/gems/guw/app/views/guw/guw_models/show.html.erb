<h5>
  <strong>
    <%= link_to @guw_model, guw.edit_guw_model_path(@guw_model, organization_id: @organization.id) %>
  </strong>
</h5>

<div class="group_button" style="margin-bottom: 45px; margin-top: -35px;">
  <% if can? :manage_modules_instances, ModuleProject %>
    <%= link_to I18n.t(:new_uw_type), guw.new_guw_model_guw_type_path(@guw_model), :class => 'btn pull-right button_margin_right'%>
  <% end %>
  <%= link_to "Afficher sous forme d'un tableau", guw.guw_model_all_guw_types_path(@guw_model), class: "btn pull-right button_margin_right" %>
</div>

<% guw_model_guw_types = @guw_model.guw_types %>
<% guw_model_guw_attributes = @guw_model.guw_attributes %>

<div class="tabs">
  <ul>
    <% if guw_model_guw_types.empty? %>
      <li>
        <a href="#tabs-default">
          <%= @guw_model %>
        </a>
      </li>
    <% else %>
      <% guw_model_guw_types.each do |guw_type| %>
        <li>
          <a href="#tabs-<%= guw_type.name.gsub(" ", "-") %>">
            <%= guw_type %>
          </a>
        </li>
      <% end %>
    <% end %>
  </ul>

  <% guw_outputs = Guw::GuwOutput.where(guw_model_id: @guw_model.id) %>

  <% if guw_model_guw_types.empty? %>
    <div id="tabs-default">
      <p>
        <%= I18n.t :no_uo_type %>
      </p>
    </div>
  <% else %>
    <% guw_model_guw_types.each do |guw_type| %>

      <% guw_type_guw_complexities = guw_type.guw_complexities %>
      <% guw_type_guw_type_complexities = guw_type.guw_type_complexities %>

      <div id="tabs-<%= guw_type.name.gsub(" ", "-") %>">

        <%= link_to "#{I18n.t(:edit)}", guw.edit_guw_model_guw_type_path(@guw_model, guw_type), class: "btn" %>
        <%= simple_format(guw_type.description) %>

        <h4>
          <b>
            <%= I18n.t(:UO_type_complexity_of, parameter: guw_type) %>
          </b>
        </h4>

        <div class="group_button">
          <% if can? :manage_modules_instances, ModuleProject %>
            <%#= link_to I18n.t(:new_type_thresold), new_guw_model_guw_type_guw_complexity_path(@guw_model, guw_type), class: "btn" %>
            <%= link_to I18n.t(:create_button), new_guw_model_guw_type_guw_complexity_path(@guw_model, guw_type), class: "btn" %>
          <% end %>
        </div>

        <%= form_tag guw_complexity_work_units_save_complexity_work_units_path do %>
          <%= hidden_field_tag :guw_type_id, guw_type.id %>
          <table class="table table-bordered table-condensed">
            <tr>
              <th></th>
              <% guw_type_guw_complexities.order("display_order asc").each do |guw_cplx| %>
                <th colspan="<%= Guw::GuwOutput.where(guw_model_id: @guw_model.id).size %>">
                  <%= guw_cplx.name %> <%= guw_cplx.default_value == true ? '(par défault)' : '' %> -
                  <%= link_to I18n.t(:edit), guw.edit_guw_model_guw_type_guw_complexity_path(@guw_model, guw_type, guw_cplx) %>
                  <% if can? :manage_modules_instances, ModuleProject %>
                      - <%= link_to I18n.t(:delete), guw_cplx, method: :delete, confirm: I18n.t(:are_you_sure) %>
                  <% end %>
                </th>
              <% end %>
            </tr>

            <tr>
              <th></th>
              <% guw_type_guw_complexities.order("display_order asc").each do |guw_cplx| %>
                <th colspan="<%= guw_type.allow_criteria == true ? "#{guw_outputs.size}" : "#{guw_outputs.size}" %>" >

                  <% if guw_type.allow_criteria == true %>
                    Calcul. &nbsp;
                  <% end %>
                  <% if guw_type.allow_criteria == true %>
                    [ &nbsp; ; &nbsp; [ &nbsp; / &nbsp; <%= I18n.t :weight %>
                  <% else %>
                    <%= I18n.t :weight %> - Ordonnée à l'origine
                  <% end %>
                </th>
              <% end %>
            </tr>

            <tr>
              <th>Seuils</th>
              <% guw_type_guw_complexities.order("display_order asc").each do |guw_cplx| %>
                <th class="align-center" colspan="<%= guw_type.allow_criteria == true ? "#{Guw::GuwOutput.where(guw_model_id: @guw_model.id).size}" : "#{Guw::GuwOutput.where(guw_model_id: @guw_model.id).size}" %>">
                  <% if guw_type.allow_criteria == true %>
                    <%= check_box_tag "enable_value[#{guw_type.id}][#{guw_cplx.id}]", "enable", guw_cplx.enable_value, class: "input-xmini" %> &nbsp;&nbsp;&nbsp;
                  <% end %>
                  <% if guw_type.allow_criteria == true %>
                    [ <%= guw_cplx.bottom_range %> ; <%= guw_cplx.top_range %> [ ;
                  <% end %> &nbsp;&nbsp;&nbsp;
                  <%= guw_cplx.weight %> x + <%= guw_cplx.weight_b.nil? ? 0 : guw_cplx.weight_b %>
                </th>
              <% end %>
            </tr>

            <tr>
              <th><%= link_to "Valeur initiale (Σ)", "#", class: "pull-left" %></th>
              <% guw_type_guw_complexities.order("display_order asc").each do |guw_complexity| %>
                <% guw_outputs.each do |guw_output| %>
                  <th>
                    <%= guw_output.name %>
                  </th>
                <% end %>
              <% end %>
            </tr>
            <tr>
              <td>Un (1)</td>
              <% guw_type_guw_complexities.order("display_order asc").each do |guw_complexity| %>
                <% guw_outputs.each do |guw_output| %>
                  <td class="align-center">

                    <% oci = Guw::GuwOutputComplexityInitialization.where(guw_complexity_id: guw_complexity.id,
                                                                          guw_output_id: guw_output.id).first %>

                    <%= text_field_tag "value_init[#{guw_complexity.id}][#{guw_output.id}]", oci.nil? ? '' : oci.init_value, class: "input-mini" %>
                  </td>
                <% end %>
              <% end %>
            </tr>
            <tr>
              <td>UO CPLX</td>
              <% guw_type_guw_complexities.order("display_order asc").each do |guw_complexity| %>
                <% guw_outputs.each do |guw_output| %>
                  <td class="align-center">

                    <% oc = Guw::GuwOutputComplexity.where( guw_complexity_id: guw_complexity.id,
                                                            guw_output_id: guw_output.id).first %>

                    <%= text_field_tag "value_cplx[#{guw_complexity.id}][#{guw_output.id}]", oc.nil? ? '' : oc.value, class: "input-mini" %>
                  </td>
                <% end %>
              <% end %>
            </tr>
            <% guw_outputs.each do |aguw_output| %>
              <tr>
                <td>
                  <%= aguw_output.name %>
                  <% got = Guw::GuwOutputType.where(guw_model_id: @guw_model.id,
                                                    guw_output_id: aguw_output.id,
                                                    guw_type_id: guw_type.id).first %>
                  <%= select_tag "display_modif[#{aguw_output.id}]", options_for_select([["Choisissez un mode d'affichage", nil], ["Afficher sans modification", "display"], ["Afficher et modifier", "display_modif"], ["Afficher et pouvoir modifier", "modif"]], selected: got.nil? ? nil : got.display_type), class: "input-medium" %>
                </td>
                <% guw_type_guw_complexities.order("display_order asc").each do |guw_complexity| %>
                  <% guw_outputs.each do |guw_output| %>

                    <% oa = Guw::GuwOutputAssociation.where( guw_complexity_id: guw_complexity.id,
                                                             guw_output_associated_id: aguw_output.id,
                                                             guw_output_id: guw_output.id).first %>
                    <td class="align-center">
                      <%= text_field_tag "config[#{guw_complexity.id}][#{guw_output.id}][#{aguw_output.id}]", oa.nil? ? '' : oa.value, class: "input-mini" %>
                    </td>
                  <% end %>
                <% end %>
              </tr>
            <% end %>

            <% @guw_model.guw_coefficients.each do |guw_coefficient| %>

              <% guw_coefficient_elements = guw_coefficient.guw_coefficient_elements %>

              <tr>
                <th>
                  <b class="pull-left">
                    x <%= link_to guw_coefficient.name, "#" %>
                  </b>
                </th>
                <% guw_type_guw_complexities.each do |gc| %>
                  <% guw_outputs.each do |guw_output| %>
                    <th>
                      <%= guw_output.name %>
                    </th>
                  <% end %>
                <% end %>

                <% guw_complexity_coefficient_elements = {} %>
                <% guw_type.guw_complexity_coefficient_elements.each do |gcce| %>
                  <% guw_complexity_coefficient_elements["#{gcce.guw_complexity_id}_#{gcce.guw_coefficient_element_id}_#{gcce.guw_output_id}"] = (gcce.value.nil? ? nil : gcce.value) %>
                <% end %>

                <% guw_coefficient_elements.each do |guw_coefficient_element| %>
                  <tr>
                    <td>
                      <%= guw_coefficient_element.name %> (<%= guw_coefficient_element.value %>)
                    </td>
                    <% guw_type_guw_complexities.order("display_order asc").each do |guw_cplx| %>
                      <% guw_outputs.each do |guw_output| %>
                        <td class="align-center">
                          <%= text_field_tag "coefficient_elements_value[#{guw_cplx.id}][#{guw_coefficient_element.id}][#{guw_output.id}]", guw_complexity_coefficient_elements["#{guw_cplx.id}_#{guw_coefficient_element.id}_#{guw_output.id}"], class: "input-mini" %>
                        </td>
                      <% end %>
                    <% end %>
                  </tr>

                <% end %>
                </td>
              </tr>
            <% end %>

            <% if @guw_model.allow_technology == true %>
              <tr>
                <th colspan="<%= guw_type.guw_complexities.size * 2 + 1 %>">
                  <b class="pull-left">
                    <%= I18n.t :technology %>
                  </b>
                </th>
              </tr>
            <% end %>

            <% if @guw_model.allow_technology == true %>
              <% @guw_model.organization.organization_technologies.each do |technology| %>
                <tr>
                  <td>
                    <%= technology.name %>
                  </td>

                  <% guw_type_guw_complexities.order("display_order asc").each do |guw_cplx| %>
                    <% tcplx = Guw::GuwComplexityTechnology.where(guw_complexity_id: guw_cplx.id,
                                                                  organization_technology_id: technology.id).first %>
                    <td colspan="<%= Guw::GuwOutput.where(guw_model_id: @guw_model.id).size %>" class="align-center">
                      <%= text_field_tag "technology_value[#{guw_cplx.id}][#{technology.id}]", tcplx.nil? ? '' : tcplx.coefficient, class: "input-mini" %>
                    </td>
                  <% end %>
                  </td>
                </tr>
              <% end %>
            <% end %>

          </table>

          <% if can? :manage_modules_instances, ModuleProject %>
            <div class="group_button">
              <%= submit_tag I18n.t(:label_save), class: "btn btn-primary" %>
            </div>
          <% end %>
        <% end %>

        <br>
        <hr>

        <% if guw_type.allow_criteria == true %>

          <h5><%= I18n.t :label_complexity_attributes %> <%= guw_type %> </h5>
          <% if can? :manage_modules_instances, ModuleProject %>
            <div class="group_button">
              <%= link_to I18n.t(:new_attribute_thresold), guw.new_guw_model_guw_type_guw_type_complexity_path(@guw_model, guw_type), class: "btn" %>
            </div>
          <% end %>


          <%= form_tag guw_model_guw_type_guw_attribute_complexities_save_attributs_complexities_path(@guw_model, guw_type.id), method: "POST" do %>
            <table class="table table-bordered">
              <tr>
                <th>
                  Seuils de complexité
                </th>
                <% guw_type_guw_type_complexities.order("display_order asc").each do |type_complexity| %>
                  <th colspan="5">
                    <%= type_complexity.name %> (<%= type_complexity.value %>) -
                    <%= link_to I18n.t(:edit), guw.edit_guw_model_guw_type_guw_type_complexity_path(@guw_model, guw_type, type_complexity) %>
                    <% if can? :manage_modules_instances, ModuleProject %>
                      <%= link_to "  - #{I18n.t(:delete)}", type_complexity, method: :delete, confirm: I18n.t(:are_you_sure) %>
                    <% end %>
                  </th>
                <% end %>
              </tr>

              <tr>
                <th>Attributs</th>
                <th colspan="<%= (guw_type_guw_type_complexities.size) * 5 %>"></th>
              </tr>

              <tr>
                <th></th>
                <% guw_type_guw_type_complexities.order("display_order ASC").each do |type_complexity| %>
                  <th>ax + b</th>
                  <th>Min [</th>
                  <th>Max [</th>
                  <th>a</th>
                  <th>b</th>
                <% end %>
              </tr>

              <% guw_model_guw_attributes.order("name ASC").each do |guw_attribute| %>
                <tr>
                  <td class="align-center">

                    <% gat = Guw::GuwAttributeType.where(guw_type_id: guw_type.id,
                                                         guw_attribute_id: guw_attribute.id).first_or_create %>

                    <% if gat.nil? %>
                      <%= link_to guw_attribute, "#" %>
                    <% else %>
                      <%= link_to "#{guw_attribute} (#{gat.default_value})", guw.edit_guw_model_guw_type_guw_attribute_type_path(@guw_model, guw_type, gat) %>
                    <% end %>
                  </td>
                  <% guw_type_guw_type_complexities.order("display_order ASC").each do |type_complexity| %>

                    <% ac = Guw::GuwAttributeComplexity.where(guw_attribute_id: guw_attribute.id, guw_type_id: guw_type, guw_type_complexity_id: type_complexity.id).first %>

                    <td class="align-center">
                      <%= check_box_tag "enable[#{guw_attribute.id}][#{type_complexity.id}]", "enable", ac.nil? ? false : ac.enable_value, class: "input-mini" %>
                    </td>
                    <td class="align-center">
                      <%= text_field_tag "bottom[#{guw_attribute.id}][#{type_complexity.id}]", ac.nil? ? '' : ac.bottom_range, class: "input-mini" %>
                    </td>
                    <td class="align-center">
                      <%= text_field_tag "top[#{guw_attribute.id}][#{type_complexity.id}]", ac.nil? ? '' : ac.top_range, class: "input-mini" %>
                    </td>
                    <td class="align-center">
                      <%= text_field_tag "coefficient[#{guw_attribute.id}][#{type_complexity.id}]", ac.nil? ? '' : ac.value, class: "input-mini" %>
                    </td>
                    <td class="align-center">
                      <%= text_field_tag "value_b[#{guw_attribute.id}][#{type_complexity.id}]", ac.nil? ? '' : ac.value_b, class: "input-mini" %>
                    </td>
                  <% end %>
                </tr>
              <% end %>
            </table>

            <% unless guw_model_guw_attributes.empty? %>
              <% if can? :manage_modules_instances, ModuleProject %>
                <%= submit_tag I18n.t(:save), class: "btn btn-primary" %>
              <% end %>
              <%= link_to I18n.t(:back), main_app.edit_organization_path(@guw_model.organization), :class => 'btn' %>
            <% end %>

            <br>
          <% end %>
        <% end %>
      </div>
    <% end %>
  <% end %>
</div>