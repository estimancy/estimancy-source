
<% module_projects = @project.module_projects.includes(:pemodule, :inverse_associated_module_projects).reject{ |mp| mp.id == @initialization_module_project.id } %>
<% @alphabet = %w(A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) %>

<% unless module_projects.empty? %>
  <div class="module_box">
    <% module_projects.each_with_index do |pmod, index| %>

      <div class="card card-module card-module--function-point module_project <%= "#{pmod.pemodule.alias}_#{pmod.position_x}_#{pmod.position_y}" %>"
           id="<%= "mp_#{pmod.pemodule.alias}_#{pmod.id}" %>"
           data-module_project_id="<%= pmod.id %>"
           style="margin-bottom: 50px; margin-left: 60px; top: <%= index * 180 %>px;">
        <div class="card-body">
          <div class="card-module-text"><%= pmod %></div>
          <div class="card-module-precision"></div>
          <div class="card-module-buttons">
            <button>
              <i class="material-icons">delete</i>
            </button>
          </div>
        </div>
      </div>
    <% end %>
  </div>
<% end %>

<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js"></script>
<script type="text/javascript" src="/assets/jsPlumb-2.0.7.js"></script>

<script>
    $(document).ready(function(){
        jsPlumb.ready(function () {

            var sourceAnchors = [
                    [0.2, 0, 0, -1, 0, 0, "foo"],
                    [1, 0.2, 1, 0, 0, 0, "bar"],
                    [0.8, 1, 0, 1, 0, 0, "baz"],
                    [0, 0.8, -1, 0, 0, 0, "qux"]
                ],
                targetAnchors = [
                    [0.6, 0, 0, -1],
                    [1, 0.6, 1, 0],
                    [0.4, 1, 0, 1],
                    [0, 0.4, -1, 0]
                ],
                exampleColor = '#3498db', //'#ffa500' //'#00f',
                exampleDropOptions = {
                    tolerance: 'touch',
                    hoverClass: 'dropHover',
                    activeClass: 'dragActive'
                },
                //connector = [ "Bezier", { cssClass: "connectorClass", hoverClass: "connectorHoverClass" } ],    //Flowchart
                connector = [ "Straight", { cssClass: "connectorClass", hoverClass: "connectorHoverClass" } ],   // ligne utilisee
                //connector = [ "Flowchart", { cornerRadius: 5, cssClass: "connectorClass", hoverClass: "connectorHoverClass" } ],   // ligne a tester
                connectorStyle = {
                    gradient: {stops: [
                            [0, exampleColor],
                            [0.5, '#3498db'],   //[0.5, '#ffa500'],  //#ffa500 pour avoir la couleur orange partout (ou orange/bleu)
                            [1, exampleColor]
                        ]},
                    lineWidth: 1, //5,
                    strokeStyle: exampleColor
                },
                hoverStyle = {
                    strokeStyle: "#3498db" //"#ffa500"
                },
                overlays = [
                    ["Diamond", { fillStyle: "#09098e", width: 7, length: 7 } ]  //["Diamond", { fillStyle: "#09098e", width: 15, length: 15 } ]
                ],
                connectionOverlays = [
                    [ "Arrow", { width:10, length:10, location:-1, id:"arrow", foldback:0.4 } ]
                ],
                endpoint_radius = 5,  //4
                container_box = "module_box";

            var endpoint = ["Dot", { cssClass: "endpointClass", radius: endpoint_radius, hoverClass: "endpointHoverClass" } ], //endpoint = ["Dot", { cssClass: "endpointClass", radius: 10, hoverClass: "endpointHoverClass" } ],
                endpointStyle = { fillStyle: exampleColor },
                anEndpoint = {
                    endpoint: endpoint,
                    paintStyle: endpointStyle,
                    hoverPaintStyle: { fillStyle: "#3498db" },  //hoverPaintStyle: { fillStyle: "#ffa500" },
                    //isSource: true,  isTarget: true,
                    maxConnections: -1,
                    connector: connector,
                    connectorStyle: connectorStyle,
                    connectorHoverStyle: hoverStyle,
                    connectorOverlays: overlays
                };
            var instance = jsPlumb.getInstance({
                DragOptions: { cursor: 'pointer', zIndex: 2000 },
                Container: container_box, //"module_box", //Container: "canvas"
                ConnectionOverlays: connectionOverlays,
            });
            // suspend drawing and initialise.
            instance.batch(function () {
                var endpoints = {};
                <% mp_connections = {} %>
                <% module_projects.each do |pmod| %>
                  <%# mp_id = "mp_#{pmod.pemodule.alias}_#{pmod.position_x}_#{pmod.position_y}" %>
                  <% mp_id = "mp_#{pmod.pemodule.alias}_#{pmod.id}" %>
                  <% mp_connections["#{mp_id}"] = [] %>
                <%# pmod.associated_module_projects.each do |assos_mp| %>
                <% pmod.inverse_associated_module_projects.each do |assos_mp| %>
                  <%# mp_assos_id = "mp_#{assos_mp.pemodule.alias}_#{assos_mp.position_x}_#{assos_mp.position_y}" %>
                  <% mp_assos_id = "mp_#{assos_mp.pemodule.alias}_#{assos_mp.id}" %>
                  <% mp_connections["#{mp_id}"] << mp_assos_id %>
                  <% end %>
                <% end %>
                var js_module_project_connections = <%= mp_connections.to_json.html_safe %> ;
                //console.log(js_module_project_connections);
                // ask jsPlumb for a selector for the window class
                divsWithWindowClass = jsPlumb.getSelector(".module_box .module_project");

                // add endpoints to all of these - one for source, and one for target, configured so they don't sit
                // on top of each other.
                for (var i = 0; i < divsWithWindowClass.length; i++) {
                    var id = instance.getId(divsWithWindowClass[i]);
                    endpoints[id] = [
                        // note the three-arg version of addEndpoint; lets you re-use some common settings easily.
                        //instance.addEndpoint(id, anEndpoint, {anchor: sourceAnchors}),
                        //instance.addEndpoint(id, anEndpoint, {anchor: targetAnchors})
                        //instance.addEndpoint(id, anEndpoint, {anchor: "Bottom", isTarget: false, isSource: true}),
                        //instance.addEndpoint(id, anEndpoint, {anchor: "Top", isTarget: true, isSource: false})
                        instance.addEndpoint(id, anEndpoint, {anchor: ["BottomCenter", "RightMiddle"], isTarget: false, isSource: true}),
                        instance.addEndpoint(id, anEndpoint, {anchor: ["TopCenter", "LeftMiddle"], isTarget: true, isSource: false})
                    ];
                }
                //then connect everything using the connections map declared above.
                for (var e in endpoints) {
                    if (js_module_project_connections[e]) {
                        for (var j = 0; j < js_module_project_connections[e].length; j++) {
                            instance.connect({
                                source: endpoints[e][0],
                                target: endpoints[js_module_project_connections[e][j]][1]
                            });
                        }
                    }
                }

                // bind Connection listener; then create connections in database
                instance.bind("connection", function(info, originalEvent) {
                    //alert(info.targetId);
                    var sourceId = info.sourceId;
                    var targetId = info.targetId;
                    var mp_source_id = $('#'+sourceId).data('module_project_id');
                    var mp_target_id = $('#'+targetId).data('module_project_id');
                    $.ajax({
                        method: 'GET',
                        url: "/update_module_project_dynamic_connections",
                        data: {
                            connect_or_detach_connection: "connect",
                            source_id: mp_source_id,
                            target_id: mp_target_id
                        }
                    });
                });
                // bind click listener; delete connections on click
                instance.bind("click", function (connection) {
                    var sourceId = connection.sourceId;
                    var targetId = connection.targetId;
                    var mp_source_id = $('#'+sourceId).data('module_project_id');
                    var mp_target_id = $('#'+targetId).data('module_project_id');
                    //delete connection
                    instance.detach(connection);
                    $.ajax({
                        method: 'GET',
                        url: "/update_module_project_dynamic_connections",
                        data: {
                            connect_or_detach_connection: "detach",
                            source_id: mp_source_id,
                            target_id: mp_target_id
                        }
                    });
                });
                // bind beforeDetach interceptor: will be fired when the click handler above calls detach, and the user
                // will be prompted to confirm deletion.
                instance.bind("beforeDetach", function (connection) {
                    return confirm("Supprimer le lien de connexion ?");
                });
                // Set the drag action on all module_project
                //instance.draggable(divsWithWindowClass);
                //instance.draggable(divsWithWindowClass, {
                // instance.draggable($(".module_project"), {
                //     containment: ".module_box",
                //     scroll: false,
                //     drag:function(event, ui){
                //     },
                //     stop:function(event, ui){
                //         //alert("test");
                //         // Saving the nodes'(module_projects) parameters
                //         var nodes = [];
                //         $(".module_project").each(function (idx, elem) {
                //             var $elem = $(elem);
                //             nodes.push({
                //                 module_project_id: $elem.data('module_project_id'),
                //                 left_position: parseInt($elem.css("left"), 10),
                //                 top_position: parseInt($elem.css("top"), 10),
                //                 top_offset: $elem.offset().top,
                //                 left_offset: $elem.offset().left
                //             });
                //         });
                //         $.ajax({
                //             method: "GET",
                //             url: "/update_module_project_left_and_top_positions",
                //             data:{
                //                 module_projects_params: nodes,
                //                 initialization_mp_id: $(".initialization_0_0").data('module_project_id')
                //             }
                //         })
                //     }
                // });
                //The initialization module_project won't be draggable
                // instance.setDraggable($(".initialization_0_0"), false);
                jsPlumb.fire("jsPlumbDemoLoaded", instance);
            });
        });
        //===================== END For JsPlumb connector ============================
        //===== update the module_box_min heigh =====
        var heights = $("div.module_project_min").map(function ()
        {
            return (parseInt($(this).css("top"), 10) + (2 * $(this).height()) );
        }).get();
        var maxHeight = Math.max.apply(null, heights);
        $("div.module_box_min").height(maxHeight);
        //==== end update the module_box_min heigh =====
        //====== For JsPlumb connections
        function hideJsplumbConnections(){
            $('.module_project').each(function(index){
                jsPlumb.hide(this.id, true);
            });
        }
        function showJsplumbConnections(){
            $('.module_project').each(function(index){
                jsPlumb.show(this.id, true);
            });
        }
        // Saves the position of all nodes / connections as a json in a textarea.
        function saveAllJsplumbConnections() {
            // Saving all of the nodes' parameters
            var nodes = [];
            $(".module_project").each(function (idx, elem) {
                var $elem = $(elem);
                nodes.push({
                    blockId: $elem.attr('id'),
                    positionX: parseInt($elem.css("left"), 10),
                    positionY: parseInt($elem.css("top"), 10)
                });
            });
            // Saving all of the connections' parameters
            var connections = [];
            $.each(jsPlumb.getConnections(), function (idx, connection) {
                connections.push({
                    pageSourceId: connection.sourceId,
                    pageTargetId: connection.targetId
                });
            });
            var nodes_graph = {};
            nodes_graph.agents = nodes;
            nodes_graph.connections = connections;
            var nodes_graph_json = JSON.stringify(nodes_graph);
            $('#json-output').val(nodes_graph_json);
        }
    });
</script>