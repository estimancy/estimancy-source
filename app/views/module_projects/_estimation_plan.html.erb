<script id="code">
    $(document).ready(function(){

        var $ = go.GraphObject.make;  // for conciseness in defining templates
        myDiagram =
            $(go.Diagram, "myDiagramDiv",  // must name or refer to the DIV HTML element
                {
                    "LinkDrawn": true,  // this DiagramEvent listener is defined below
                    "LinkRelinked": true,
                    "undoManager.isEnabled": true  // enable undo & redo
                });

        function nodeStyle() {
            return [
                new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
                {
                    locationSpot: go.Spot.Center
                }
            ];
        }

        function makePort(name, align, spot, output, input) {
            var horizontal = align.equals(go.Spot.Top) || align.equals(go.Spot.Bottom);
            return $(go.Shape,
                {
                    fill: "transparent",  // changed to a color in the mouseEnter event handler
                    strokeWidth: 0,  // no stroke
                    width: horizontal ? NaN : 8,  // if not stretching horizontally, just 8 wide
                    height: !horizontal ? NaN : 8,  // if not stretching vertically, just 8 tall
                    alignment: align,  // align the port on the main Shape
                    stretch: (horizontal ? go.GraphObject.Horizontal : go.GraphObject.Vertical),
                    portId: name,  // declare this object to be a "port"
                    fromSpot: spot,  // declare where links may connect at this port
                    fromLinkable: output,  // declare whether the user may draw links from here
                    toSpot: spot,  // declare where links may connect at this port
                    toLinkable: input,  // declare whether the user may draw links to here
                    cursor: "pointer",  // show a different cursor to indicate potential link point
                    mouseEnter: function(e, port) {  // the PORT argument will be this Shape
                        if (!e.diagram.isReadOnly) port.fill = "rgba(255,0,255,0.5)";
                    },
                    mouseLeave: function(e, port) {
                        port.fill = "transparent";
                    }
                });
        }

        var cxElement = document.getElementById("contextMenu");

        function showContextMenu(obj, diagram, tool) {
            // Show only the relevant buttons given the current state.
            var cmd = diagram.commandHandler;
            document.getElementById("modify").style.display = cmd.canCutSelection() ? "block" : "none";
            document.getElementById("delete").style.display = cmd.canDeleteSelection() ? "block" : "none";


            cxElement.style.display = "block";
            var mousePt = diagram.lastInput.viewPoint;
            cxElement.style.left = mousePt.x + "px";
            cxElement.style.top = mousePt.y + "px";
        }

        var myContextMenu = $(go.HTMLInfo, {
            show: showContextMenu,
            mainElement: cxElement
        });

        // define the Node templates for regular nodes
        myDiagram.nodeTemplate =
            $(go.Node, "Table", nodeStyle(),
              $(go.Panel, "Auto",
                  { contextMenu: myContextMenu },
                  $(go.Shape,
                    {
                        geometryString:
                            "F M0 0 L80 0 B-90 90 80 20 20 20 L100 100 20 100 B90 90 20 80 20 20z",
                        fill: "#ffffff",
                        strokeWidth: 1,
                        stroke: "#5472D3"
                    }, new go.Binding("figure", "figure")),
                $(go.TextBlock,
                    {
                        font: "bold 10pt Helvetica, Arial, sans-serif",
                        stroke: "#5472D3",
                        textAlign: "left",
                        editable: false
                    }, {
                        margin: 20,
                        maxSize: new go.Size(160, 80),
                        minSize: new go.Size(160, 80),
                        wrap: go.TextBlock.WrapFit,
                        editable: false,
                        isMultiline: false
                    },
                    new go.Binding("text").makeTwoWay())
                ),
                makePort("T", go.Spot.Top, go.Spot.TopSide, false, true),
                makePort("B", go.Spot.Bottom, go.Spot.BottomSide, true, false));

        myDiagram.contextMenu = myContextMenu;
        myDiagram.allowMove = false;

        cxElement.addEventListener("contextmenu", function(e) {
            e.preventDefault();
            return false;
        }, false);

        // replace the default Link template in the linkTemplateMap
        myDiagram.linkTemplate =
            $(go.Link,  // the whole link panel
                {
                    routing: go.Link.AvoidsNodes,
                    curve: go.Link.JumpOver,
                    corner: 0, toShortLength: 4,
                    relinkableFrom: false,
                    relinkableTo: false,
                    reshapable: false,
                    resegmentable: false,
                    // mouse-overs subtly highlight links:
                    mouseEnter: function(e, link) { link.findObject("HIGHLIGHT").stroke = "rgba(30,144,255,0.2)"; },
                    mouseLeave: function(e, link) { link.findObject("HIGHLIGHT").stroke = "transparent"; },
                    selectionAdorned: false
                },
                new go.Binding("points").makeTwoWay(),
                $(go.Shape,  // the highlight shape, normally transparent
                    { isPanelMain: true, strokeWidth: 8, stroke: "transparent", name: "HIGHLIGHT" }),
                $(go.Shape,  // the link path shape
                    { isPanelMain: true, stroke: "gray", strokeWidth: 1 },
                    new go.Binding("stroke", "isSelected", function(sel) { return sel ? "dodgerblue" : "gray"; }).ofObject()),
                $(go.Shape,  // the arrowhead
                    { toArrow: "standard", strokeWidth: 0, fill: "gray" }),
                $(go.Panel, "Auto", { visible: true, name: "LABEL", segmentIndex: 2, segmentFraction: 0.5 },
                    new go.Binding("visible", "visible").makeTwoWay(), $(go.Shape, "RoundedRectangle", { fill: "#F8F8F8", strokeWidth: 0 }),
                $(go.TextBlock, "Yes",
                    {
                        textAlign: "center",
                        font: "8pt helvetica, arial, sans-serif",
                        stroke: "#333333",
                        editable: false
                    },
                    new go.Binding("text").makeTwoWay())
                )
            );

        data =
            {
                "class": "go.GraphLinksModel",
                "linkFromPortIdProperty": "fromPort",
                "linkToPortIdProperty": "toPort",
                "nodeDataArray": [
                    { key: "pf", "loc":"100 0", "text": "Point de Fonction" },
                    { key: "cocomo", "loc":"100 170", "text": "Cocomo"},
                    { key: "staffing", "loc":"100 340", "text":"Staffing"},
                    { key: "wbs", "loc":"100 510", "text":"WBS"},
                    { key: "isbsg", "loc":"100 680", "text":"ISBSG"}
        ],
            "linkDataArray": [
            {"from": "pf", "to": "cocomo", "fromPort": "B", "toPort": "T", text: "TB" },
            {"from": "pf", "to": "cocomo", "fromPort": "B", "toPort": "T", text: "TN" },
            {"from": "cocomo", "to": "staffing", "fromPort": "B", "toPort": "T", text: "EB" },
            {"from": "staffing", "to": "wbs", "fromPort": "B", "toPort": "T", text: "EN" },
            {"from": "wbs", "to": "isbsg", "fromPort": "B", "toPort": "T", text: "EN" },
            {"from": "wbs", "to": "isbsg", "fromPort": "B", "toPort": "T", text: "C" },
            {"from": "cocomo", "to": "isbsg", "fromPort": "B", "toPort": "T", text: "E" },
        ]};

        // Load !
        myDiagram.model = go.Model.fromJson(data);
  });
</script>

<div style="position: relative;">
  <div id="myDiagramDiv" style="flex-grow: 1; height: 1000px;"></div>
  <div id="contextMenu">
    <ul>
      <li id="modify" onclick="cxcommand(event)"><%= link_to "Modifier", edit_module_project_path(@project.module_projects.last, organization_id: @organization.id) %></li>
      <li id="delete" onclick="cxcommand(event)"><a href="#" target="_self">Supprimer</a></li>
    </ul>
  </div>
</div>

<style type="text/css">
  /* CSS for the traditional context menu */
  #contextMenu {
    z-index: 10002;
    position: absolute;
    left: 5px;
    border: 1px solid #444;
    background-color: #F5F5F5;
    display: none;
    box-shadow: 0 0 10px rgba( 0, 0, 0, .4 );
    font-size: 12px;
    font-family: sans-serif;
    font-weight: bold;
  }
  #contextMenu ul {
    list-style: none;
    top: 0;
    left: 0;
    margin: 0;
    padding: 0;
  }
  #contextMenu li a {
    position: relative;
    min-width: 60px;
    color: #444;
    display: inline-block;
    padding: 6px;
    text-decoration: none;
    cursor: pointer;
  }
  #contextMenu li:hover {
    background: #CEDFF2;
    color: #EEE;
  }
  #contextMenu li ul li {
    display: none;
  }
  #contextMenu li ul li a {
    position: relative;
    min-width: 60px;
    padding: 6px;
    text-decoration: none;
    cursor: pointer;
  }
  #contextMenu li:hover ul li {
    display: block;
    margin-left: 0px;
    margin-top: 0px;
  }
</style>
