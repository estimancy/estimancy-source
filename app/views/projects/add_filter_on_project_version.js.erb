<% case params[:project_list_name] %>
    <% when 'filter_projects_version' %>
        $("#projects").html("<%=raw j(render :partial => 'projects/projects', :object => [@organization, @projects]) %>");
    <% when 'filter_organization_projects_version' %>
        $("#organization_projects").html("<%=raw j(render :partial => 'organizations/organization_projects', object: [@organization, @projects]) %>");
    <% when 'filter_user_projects_version' %>
        $("#user_projects").html("<%=raw j(render :partial => 'users/user_projects', :locals => {:projects => @projects, :project_users => current_user.projects}) %>");
    <% when 'filter_group_projects_version' %>
        <% @group = Group.find(params[:group_id])  %>
        $("#group_projects").html("<%=raw j(render :partial => 'groups/group_projects', :locals => {:projects => @projects, :group => @group}) %>");
<% end %>


var pagerOptions = {

    // target the pager markup - see the HTML block below
    container: $(".pager"),

    // use this url format "http:/mydatabase.com?page={page}&size={size}&{sortList:col}"
    ajaxUrl: null,

    // modify the url after all processing has been applied
    customAjaxUrl: function(table, url) { return url; },

    // process ajax so that the data object is returned along with the total number of rows
    // example: { "data" : [{ "ID": 1, "Name": "Foo", "Last": "Bar" }], "total_rows" : 100 }
    ajaxProcessing: function(ajax){
        if (ajax && ajax.hasOwnProperty('data')) {
            // return [ "data", "total_rows" ];
            return [ ajax.total_rows, ajax.data ];
        }
    },

    // output string - default is '{page}/{totalPages}'
    // possible variables: {page}, {totalPages}, {filteredPages}, {startRow}, {endRow}, {filteredRows} and {totalRows}
    output: '{startRow} - {endRow} / {filteredRows} ({totalRows})',

    // apply disabled classname to the pager arrows when the rows at either extreme is visible - default is true
    updateArrows: true,

    // starting page of the pager (zero based index)
    page: 0,

    // Number of visible rows - default is 10
    size: 10,

    // if true, the table will remain the same height no matter how many records are displayed. The space is made up by an empty
    // table row set to a height to compensate; default is false
    fixedHeight: false,

    // remove rows from the table to speed up the sort of large tables.
    // setting this to false, only hides the non-visible rows; needed if you plan to add/remove rows with the pager enabled.
    removeRows: false,

    // css class names of pager arrows
    cssNext: '.next', // next page arrow
    cssPrev: '.prev', // previous page arrow
    cssFirst: '.first', // go to first page arrow
    cssLast: '.last', // go to last page arrow

    cssGoto  : ".pagenum",
    cssPageDisplay: '.pagedisplay', // location of where the "output" is displayed
    cssPageSize: '.pagesize', // page size selector - select dropdown that sets the "size" option

    // class added to arrows when at the extremes (i.e. prev/first arrows are "disabled" when on the first page)
    cssDisabled: 'disabled', // Note there is no period "." in front of this class name
    cssErrorRow: 'tablesorter-errorRow' // ajax error information row

};

<!-- Adding tablesorter filter save on page reload -->
$('table')
        .bind('filterInit', function() {
            // check that storage ulility is loaded
            if ($.tablesorter.storage) {
                // get saved filters
                var f = $.tablesorter.storage(this, 'tablesorter-filters') || [];
                $(this).trigger('search', [f]);
            }
        })
        .bind('filterEnd', function(){
            if ($.tablesorter.storage) {
                // save current filters
                var f = $(this).find('.tablesorter-filter').map(function(){
                    return $(this).val() || '';
                }).get();
                $.tablesorter.storage(this, 'tablesorter-filters', f);
            }
        });

<!-- Adding tablesorter filter save -->

//Update the current TAB footer
var current_tab_index = $(".tabs").tabs('option', 'selected');
var current_tab_name = current_tab_index+1;
if($("#table_list_"+current_tab_name).length){

    $("#table_list_"+current_tab_name)
        .tablesorter({
            // this will apply the bootstrap theme if "uitheme" widget is included
            // the widgetOptions.uitheme is no longer required to be set
            theme : "bootstrap",
            widthFixed: true,
            sortList: [[0,0]],
            headerTemplate : '{content} {icon}', // new in v2.7. Needed to add the bootstrap icon!
            debug: true,
            dateFormat       : 'ddmmyyyy',
            // widget code contained in the jquery.tablesorter.widgets.js file
            // use the zebra stripe widget if you plan on hiding any rows (filter widget)

            widgets: [ 'uitheme', 'zebra', 'filter', 'savesort'],
            widgetOptions : {
                filter_cssFilter   : 'tablesorter-filter',
                zebra : ["even", "odd"],
                // jQuery selector string of an element used to reset the filters
                filter_reset : '.reset',
                filter_functions : {

                }

            }

        })
        .tablesorterPager(pagerOptions);
}
