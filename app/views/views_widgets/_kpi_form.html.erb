<%= simple_form_for(@views_widget, is_label_widget: true, :remote => true) do |f| %>
  <%= f.error_notification %>
  <div class="form-inputs">
    <%= f.input :view_id, as: :hidden, :input_html => { value: @view_id } %>
    <%= f.input :position_x, as: :hidden, :input_html => { value: @position_x } %>
    <%= f.input :position_y, as: :hidden, :input_html => { value: @position_y } %>
    <%= hidden_field_tag 'current_module_project_id', @module_project.id %>
    <%= f.input :is_label_widget, as: :hidden, :input_html => { value: true } %>
    <%= f.input :widget_type, as: :hidden, input_html: { value: "text" } %>

    <div class="row-fluid">
      <div class="span6">
        <%= f.input :name, label: I18n.t(:name) %>
      </div>
      <div class="span6">
        <label class="checkbox"></label>
        <%= f.input :show_name, label: I18n.t(:show_name) %>
      </div>
    </div>

    <div class="row-fluid">
      <div class="span12">
        <p>Variable 1</p>
        <%= f.association :module_project, inline_label: "Modules", collection: [@module_project].map{|i| [i, i.id]}, selected: @module_project.id, include_blank: false, input_html: { class: "inline_attr" } %>
        <%= f.input :estimation_value_id, collection: @module_project_attributes, as: :grouped_select, group_method: :last, group_label_method: :first, inline_label: I18n.t(:associated_attribute), input_html:{class: "inline_attr"}, include_blank: false %>
      </div>
    </div>

    <div class="row-fluid">
      <div class="span12">
        <p>Variable 2</p>
        <%= f.association :module_project, inline_label: "Modules", collection: [@module_project].map{|i| [i, i.id]}, selected: @module_project.id, include_blank: false, input_html: { class: "inline_attr" } %>
        <%= f.input :estimation_value_id, collection: @module_project_attributes, as: :grouped_select, group_method: :last, group_label_method: :first, inline_label: I18n.t(:associated_attribute), input_html:{class: "inline_attr"}, include_blank: false %>
      </div>
    </div>

    <div class="row-fluid">
      <div class="span12">
        <label>Var 2</label>
        <%= text_field_tag "formula", "" %>
      </div>
    </div>

    <div class="actions">
      <% if can?(:alter_estimation_plan, @project)%>
          <%= submit_tag I18n.t('save'), :class => 'btn' %>
      <% end %>
      <button class="btn" data-dismiss="modal" aria-hidden="true"><%= I18n.t(:close) %></button>
    </div>
  </div>
<% end %>

<script>

$("#views_widget_color").spectrum({
    showPaletteOnly: true,
    showPalette:true,
    hideAfterPaletteSelect:true,
    showInitial: true,
    preferredFormat: "hex",
    replacerClassName: 'mycolorpicker',
    //color: 'blanchedalmond',
    <% if @views_widget.new_record? %>
    color: 'blanchedalmond',
    <% end %>

    palette: [
        ['#E9ABBE', '#AA8AB8', "#FFD8BB", '#DAD5DC', '#E5D4DA'],
        ['#F3CFDA', '#E8B189', '#F4EBEE', '#D3CCC6', '#BDB1B5'],
        ['#D5DEBC', '#EAE4C6', '#839B94', '#E1F7A6', '#89CCB8'],
        ['#FFFFFF', '#B7D2FC', '#6CA5FF', '#B576AD', '#CEDEF6']
    ]
});

    // Update the view_widget show_min_max attribute according to the selected widget_type
    var delete_min_max_on_widget_type = [ "line_chart", "bar_chart", "area_chart", "pie_chart", "timeline", "stacked_bar_chart", "histogram_effort_per_phase", "pie_chart_effort_per_phase", "histogram_cost_per_phase",
        "pie_chart_cost_per_phase", "stacked_bar_chart_effort_per_phases_profiles",  "stacked_bar_chart_cost_per_phases_profiles"]

    var widget_type = $("#views_widget_widget_type").val();
    if (widget_type !== ""){
        if (jQuery.inArray( widget_type, delete_min_max_on_widget_type) !== -1){
            $('#views_widget_show_min_max').attr('disabled','disabled');
            $("#views_widget_widget_type").value = 0;
        }
        else{
            $('#views_widget_show_min_max').removeAttr('disabled');
        }
    }

    // Update the view_widget attribute according to the selected module
    $("#views_widget_module_project_id").change(function() {
        if ($(this).val() !== ""){
            return $.ajax({
                url: "/update_widget_module_project_data",
                method: "GET",
                data: "module_project_id=" + $(this).val()
            });
        }
    });

    $("#views_widget_widget_type").change(function() {
        var widget_type = $(this).val();
        if (widget_type !== ""){
            if (jQuery.inArray( widget_type, delete_min_max_on_widget_type) !== -1){
                $('#views_widget_show_min_max').attr('disabled','disabled');
                $("#views_widget_widget_type").value = 0;
            } else{
                $('#views_widget_show_min_max').removeAttr('disabled');
            }
        }
    });


    //manage the label widget
    $("#views_widget_is_label_widget").change(function(){
        if($(this).is(':checked')){
            //alert(1);
            //$("#new_views_widget").closest("tr").find(":input.inline_attr").attr("disabled", 'disabled');
            $("form#new_views_widget select.inline_attr, input:checkbox.inline_attr ").attr("disabled", 'disabled');
        } else{
            //alert(0);
            $("form#new_views_widget select.inline_attr, input:checkbox.inline_attr ").removeAttr('disabled');
        }
    });

</script>