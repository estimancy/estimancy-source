<div class="tabs">
  <ul>
    <li><a href="#tabs-1"><%= I18n.t(:pe_attributes) %></a></li>
  </ul>

  <div id="tabs-1">
    <table border="0" width="100%">
      <tr>
        <td style="text-align:right;">
          <%= link_to I18n.t('new_pe_attribute'), new_pe_attribute_path, :class => 'btn' %>
        </td>
      </tr>
    </table>

    <table class="table tablesorterPager table-striped table-bordered table-condensed  ">
      <thead>
      <tr>
        <th><%= I18n.t(:name) %></th>
        <th>Alias</th>
        <th><%= I18n.t(:description) %></th>
        <th><%= I18n.t(:attributes_type) %></th>
        <th><%= I18n.t(:record_status) %></th>
        <th><%= I18n.t(:actions) %></th>
      </tr>
      </thead>

      <% if @attributes.empty? %>
          <p style="text-align:center;"> <%= I18n.t('empty') %></p>
      <% else %>
          <% @attributes.each do |attribute| %>
              <tr>
                <td><%= attribute.name %></td>
                <td><%= attribute.alias %></td>
                <td><%= attribute.description %></td>
                <td><%= attribute.attr_type.humanize %></td>
                <td><%= attribute.record_status.name unless attribute.record_status.nil? %> <%= attribute.show_custom_value %></td>
                <td>
                  <%= link_to '', edit_pe_attribute_path(attribute), :class => 'icon-pencil icon-large icon-border pull-left', :title => I18n.t('edit') %>
                  <%= link_to '', attribute, confirm: I18n.t('are_you_sur'), method: :delete, :class => 'icon-remove icon-large icon-border pull-left', :style => 'color:red', :title => I18n.t('delete') %>

                  <% if is_master_instance? && !attribute.is_local_record? %>
                      <% if attribute.is_retired? %>
                          <%= link_to('', "pe_attributes/#{attribute.id}/restore_change", confirm: I18n.t('restoring'),:class => 'icon-undo icon-large icon-border pull-left', :style => 'color:orange', :title => I18n.t('restore_title')) %>
                      <% else %>
                          <% unless attribute.is_defined? %>
                              <%= link_to('', "pe_attributes/#{attribute.id}/validate_change", confirm: I18n.t('validation'),:class => 'icon-ok icon-large icon-border pull-left', :style => 'color:green', :title => I18n.t('validate_title')) %>
                          <% end %>
                      <% end %>
                  <% end %>
                </td>
              </tr>
          <% end %>
          <div id="pager" class="pager">
            <tfoot>

              <th colspan="7" class="pager form-horizontal">
                <button type="button" class="btn first"><i class="icon-step-backward"></i></button>
                <button type="button" class="btn prev"><i class="icon-arrow-left"></i></button>
                <span class="pagedisplay"></span> <!-- this can be any element, including an input -->
                <button type="button" class="btn next"><i class="icon-arrow-right"></i></button>
                <button type="button" class="btn last"><i class="icon-step-forward"></i></button>
                <select class="pagesize input-mini" title="Select page size">
                  <option selected="selected" value="10">10</option>
                  <option value="20">20</option>
                  <option value="30">30</option>
                  <option value="40">40</option>
                </select>
                <select class="pagenum input-mini" title="Select page number"></select>
              </th>
            </tr>
            </tfoot>
          </div>
      <% end %>
    </table>
  </div>
</div>

<script type="text/javascript">
    $(function() {

        var pagerOptions = {

            // target the pager markup - see the HTML block below
            container: $(".pager"),

            // use this url format "http:/mydatabase.com?page={page}&size={size}&{sortList:col}"
            ajaxUrl: null,

            // modify the url after all processing has been applied
            customAjaxUrl: function(table, url) { return url; },

            // process ajax so that the data object is returned along with the total number of rows
            // example: { "data" : [{ "ID": 1, "Name": "Foo", "Last": "Bar" }], "total_rows" : 100 }
            ajaxProcessing: function(ajax){
                if (ajax && ajax.hasOwnProperty('data')) {
                    // return [ "data", "total_rows" ];
                    return [ ajax.total_rows, ajax.data ];
                }
            },

            // output string - default is '{page}/{totalPages}'
            // possible variables: {page}, {totalPages}, {filteredPages}, {startRow}, {endRow}, {filteredRows} and {totalRows}
            output: '{startRow} to {endRow} ({totalRows})',

            // apply disabled classname to the pager arrows when the rows at either extreme is visible - default is true
            updateArrows: true,

            // starting page of the pager (zero based index)
            page: 0,

            // Number of visible rows - default is 10
            size: 10,

            // if true, the table will remain the same height no matter how many records are displayed. The space is made up by an empty
            // table row set to a height to compensate; default is false
            fixedHeight: true,

            // remove rows from the table to speed up the sort of large tables.
            // setting this to false, only hides the non-visible rows; needed if you plan to add/remove rows with the pager enabled.
            removeRows: false,

            // css class names of pager arrows
            cssNext: '.next', // next page arrow
            cssPrev: '.prev', // previous page arrow
            cssFirst: '.first', // go to first page arrow
            cssLast: '.last', // go to last page arrow

            cssGoto  : ".pagenum",
            cssPageDisplay: '.pagedisplay', // location of where the "output" is displayed
            cssPageSize: '.pagesize', // page size selector - select dropdown that sets the "size" option

            // class added to arrows when at the extremes (i.e. prev/first arrows are "disabled" when on the first page)
            cssDisabled: 'disabled', // Note there is no period "." in front of this class name
            cssErrorRow: 'tablesorter-errorRow' // ajax error information row

        };

        $.extend($.tablesorter.themes.bootstrap, {
            // these classes are added to the table. To see other table classes available,
            // look here: http://twitter.github.com/bootstrap/base-css.html#tables
            table      : 'table table-bordered',
            header     : 'bootstrap-header', // give the header a gradient background
            footerRow  : '',
            footerCells: '',
            icons      : '', // add "icon-white" to make them white; this icon class is added to the <i> in the header
            sortNone   : 'bootstrap-icon-unsorted',
            sortAsc    : 'icon-chevron-up',
            sortDesc   : 'icon-chevron-down',
            active     : '', // applied when column is sorted
            hover      : '', // use custom css here - bootstrap class may not override it
            filterRow  : '', // filter row class
            even       : '', // odd row zebra striping
            odd        : ''  // even row zebra striping
        });

        // call the tablesorter plugin and apply the uitheme widget
        $("table")
                .tablesorter({
                    // this will apply the bootstrap theme if "uitheme" widget is included
                    // the widgetOptions.uitheme is no longer required to be set
                    theme : "bootstrap",

                    widthFixed: true,

                    headerTemplate : '{content} {icon}', // new in v2.7. Needed to add the bootstrap icon!

                    // widget code contained in the jquery.tablesorter.widgets.js file
                    // use the zebra stripe widget if you plan on hiding any rows (filter widget)
                    widgets : [ "uitheme", "filter", "zebra" ],

                    widgetOptions : {
                        // using the default zebra striping class name, so it actually isn't included in the theme variable above
                        // this is ONLY needed for bootstrap theming if you are using the filter widget, because rows are hidden
                        zebra : ["even", "odd"],

                        // reset filters button
                        filter_reset : ".reset"

                        // set the uitheme widget to use the bootstrap theme class names
                        // this is no longer required, if theme is set
                        // ,uitheme : "bootstrap"

                    }
                })
            // bind to pager events
            // *********************
                .bind('pagerChange pagerComplete pagerInitialized pageMoved', function(e, c){
                    var msg = '"</span> event triggered, ' + (e.type === 'pagerChange' ? 'going to' : 'now on') +
                            ' page <span class="typ">' + (c.page + 1) + '/' + c.totalPages + '</span>';
                    $('#display')
                            .append('<li><span class="str">"' + e.type + msg + '</li>')
                            .find('li:first').remove();
                })

            // initialize the pager plugin
            // ****************************
                .tablesorterPager(pagerOptions);


    });
</script>


